@model XODB.SpatialDMS.ViewModels.DigitiseOnMapViewModel


@Html.Partial("Header")
@{
    //Style.Require("XODBAdmin");
    HtmlHelper.ClientValidationEnabled = true;
    HtmlHelper.UnobtrusiveJavaScriptEnabled = true;
    Layout.Title = T("Digitise on a map").ToString();
}

@if (true) {
    using (Html.BeginForm("DigitiseOnMapComplete", "User", new { area = "XODB.SpatialDMS", Controller = "User", Action = "DigitiseOnMapComplete" }, FormMethod.Get, new { id = "form1", @class = "edit-form" }))
    {
          <fieldset>
              <legend>@Layout.Title</legend>
               <div class="editor-label">
                  @Html.LabelFor(x => x.Name)
              </div>
              <div class="editor-field">
                  @Html.TextBoxFor(x => x.Name)
              </div>
             <div class="editor-label">
                  @Html.LabelFor(x => x.Coordinates)
              </div>
              <div class="editor-field">
                  @Html.TextAreaFor(x => x.Coordinates)
              </div>
              <br />
              Easting: <input type="text" name="boundsEasting" id="boundsEasting" />
              <br />
               Northing: <input type="text" name="boundsNorthing" id="boundsNorthing"/>

            
              @Html.ValidationSummary()
              <input type="submit" value="Upload" class="submitButtonLeft"/>


               <input type="button"  Value="Del. shape" onClick="deleteSelectedShape();"/>
               <input type="button" value="Get coordinates" onClick="addtext();"><br />
               <input type="button" value="Draw from text" onClick="DrawPolyFromText();"><br />

              

              <div id="map" style="width: 800; height: 600;"></div>
          </fieldset>
    }
}
else
{
    Html.RenderAction("UnauthorizedRedirect");
}

<script type="text/javascript">

    window.onload = function () { initialize()  };

    //<![CDATA[

    // ]]>


</script>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&libraries=drawing"></script>
<script type="text/javascript">
    var poly, map;
    
    var mapOverlays = new Array();
    
    var selectedShape;
    var geocoder;
    var drawingManager;

    var path = new google.maps.MVCArray;

    function initialize() {
        var uluru = new google.maps.LatLng(-25.344, 131.036);
        geocoder = new google.maps.Geocoder();
        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 8,
            center: uluru,
            mapTypeId: google.maps.MapTypeId.SATELLITE
        });

        poly = new google.maps.Polygon({
            strokeWeight: 3,
            fillColor: '#5555FF'

        });
        poly.setMap(map);
        poly.setPaths(new google.maps.MVCArray([path]));
        poly.setOptions({
            editable: true
        });

//        google.maps.event.addListener(poly, 'mouseover', function () {
//            poly.setOptions({
//                editable: true
//            });
//        });
//        google.maps.event.addListener(poly, 'mouseout', function () {
//            poly.setOptions({
//                editable: false
//            });
//        });

      //  google.maps.event.addListener(map, 'click', addPoint);

        //,        google.maps.drawing.OverlayType.RECTANGLE

        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [
        google.maps.drawing.OverlayType.MARKER,      
        google.maps.drawing.OverlayType.POLYGON
      ]
            },
            polygonOptions: {
                fillColor: '#ff0000',
                tr: 0.5,
                fillOpacity: 0.5,
                strokeWeight: 1,
                clickable: true,
                zIndex: 1,
                editable: true
            },
            markerOptions: {
                fillColor: '#ff0000',                           
                clickable: true,
                zIndex: 1,
                dragable: true
            }

        });
        
        
       // google.maps.event.addListener(drawingManager, "overlaycomplete", overlayDone);

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
            if (e.type != google.maps.drawing.OverlayType.MARKER) {
                overlayDone(e);
            } else {
                var uniqueid = uniqid();
                e.overlay.uniqueid = uniqueid;
                e.overlay.title = "";
                e.overlay.content = "";
                e.overlay.type = e.type;
                mapOverlays.push(e.overlay);
            }
        });

//        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
//            if (e.type != google.maps.drawing.OverlayType.MARKER) {
//                // Switch back to non-drawing mode after drawing a shape.
//                drawingManager.setDrawingMode(null);

//                // Add an event listener that selects the newly-drawn shape when the user
//                // mouses down on it.
//                var newShape = e.overlay;
//                newShape.type = e.type;
//                google.maps.event.addListener(newShape, 'click', function () {
//                    setSelection(newShape);
//                });
//                setSelection(newShape);
//            }
//        });
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
       // google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);
        

        drawingManager.setMap(map);

        google.maps.event.addListener(map, 'bounds_changed', function () {
            var bounds = map.getBounds();
            var ne = bounds.getNorthEast();
            var sw = bounds.getSouthWest();
            //do whatever you want with those bounds
            var textOut = ne.toString();
            document.getElementById("boundsEasting").value = textOut;
            textOut = sw.toString();
            document.getElementById("boundsNorthing").value = textOut;

           // alert('Pan finished now bounds are ' + soutWest + 'S and ' + northEast);
        });

       
        
    }

    function DrawPolyFromText() {


        //fake database info
        var p1 = [
         new google.maps.LatLng(-25.204785835916102, 131.275634765625),
         new google.maps.LatLng(-25.229634139099637, 132.82470703125),
         new google.maps.LatLng(-26.244002317636177, 131.275634765625)
        ];
        var p2 = [
         new google.maps.LatLng(-26.39663644161043, 131.539306640625),
         new google.maps.LatLng(-25.462959542582798, 132.945556640625),
         new google.maps.LatLng(-26.603109396158036, 132.9400634765625)
        ];

        //write polygon in map
        loadWithFk(p1);
        loadWithFk(p2);
    }

    function loadWithFk(polyArray1) {
        //grep should be replaced with tha call to your backend for getting data for fk_id
      
           var mapPoly = new google.maps.Polygon({
               paths: polyArray1,
                strokeColor: "#FF8800",
                strokeOpacity: 0.8,
                strokeWeight: 3,
                fillColor: "#FF8800",
                fillOpacity: 0.35,
                editable: true
                
            });
           mapPoly.setMap(map);
           
           
           
           
            
           mapOverlays.push(mapPoly);

           google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
               
               overlayDone(e);
           });

           google.maps.event.addListener(mapPoly, 'click', function () {
               setSelection(mapPoly);
           });
           setSelection(mapPoly);
          
           drawingManager.changed();

        
    }

    function clearSelection() {
        if (selectedShape) {
            selectedShape.setEditable(false);
            selectedShape = null;
        }
    }


    function deleteSelectedShape() {
        if (selectedShape) {
            selectedShape.setMap(null);
        }
    }

    function setSelection(shape) {
        clearSelection();
        //selectedShape.setStrokeWeight(1);
        if (selectedShape) {
            selectedShape.setEditable(false);
        }
        selectedShape = shape;
        shape.setEditable(true);
        //shape.setStrokeWeight(2);
        //selectColor(shape.get('fillColor') || shape.get('strokeColor'));
    }

    function overlayDone(event) {
       
            drawingManager.setDrawingMode(null);
            var uniqueid = uniqid();
            event.overlay.uniqueid = uniqueid;
            event.overlay.title = "";
            event.overlay.content = "";
            event.overlay.type = event.type;
            mapOverlays.push(event.overlay);

            var newShape = event.overlay;
            newShape.type = event.type;
            google.maps.event.addListener(newShape, 'click', function () {
                setSelection(newShape);
            });
            setSelection(newShape);
            addtext();
        //AttachClickListener(event.overlay);
        //openInfowindow(event.overlay, getShapeCenter(event.overlay), getEditorContent(event.overlay));
    }

    function uniqid() {
        var newDate = new Date;
        return newDate.getTime();
    }

    

    function mapToObject() {
        var tmpMap = new Object;

        var outputString = "";
        var tmpOverlay, paths;
        tmpMap.zoom = map.getZoom();
        tmpMap.tilt = map.getTilt();
        tmpMap.mapTypeId = map.getMapTypeId();
        tmpMap.center = { lat: map.getCenter().lat(), lng: map.getCenter().lng() };
        tmpMap.overlays = new Array();

        for (var i = 0; i < mapOverlays.length; i++) {
            if (mapOverlays[i].getMap() == null) {
                continue;
            }
            tmpOverlay = new Object;
            tmpOverlay.type = mapOverlays[i].type;
            tmpOverlay.title = mapOverlays[i].title;
            tmpOverlay.content = mapOverlays[i].content;

            if (mapOverlays[i].fillColor) {
                tmpOverlay.fillColor = mapOverlays[i].fillColor;
            }

            if (mapOverlays[i].fillOpacity) {
                tmpOverlay.fillOpacity = mapOverlays[i].fillOpacity;
            }

            if (mapOverlays[i].strokeColor) {
                tmpOverlay.strokeColor = mapOverlays[i].strokeColor;
            }

            if (mapOverlays[i].strokeOpacity) {
                tmpOverlay.strokeOpacity = mapOverlays[i].strokeOpacity;
            }

            if (mapOverlays[i].strokeWeight) {
                tmpOverlay.strokeWeight = mapOverlays[i].strokeWeight;
            }

            if (mapOverlays[i].icon) {
                tmpOverlay.icon = mapOverlays[i].icon;
            }

            if (mapOverlays[i].flat) {
                tmpOverlay.flat = mapOverlays[i].flat;
            }

            if (mapOverlays[i].type == "polygon" || typeof (mapOverlays[i]) == google.maps.Polygon) {
                tmpOverlay.paths = new Array();
                paths = mapOverlays[i].getPaths();
                outputString += "Polygon " + i+"\n";
                for (var j = 0; j < paths.length; j++) {
                    tmpOverlay.paths[j] = new Array();
                    for (var k = 0; k < paths.getAt(j).length; k++) {
                        tmpOverlay.paths[j][k] = { lat: paths.getAt(j).getAt(k).lat().toString(), lng: paths.getAt(j).getAt(k).lng().toString() };
                        outputString += paths.getAt(j).getAt(k).lat().toString() + "," + paths.getAt(j).getAt(k).lng().toString() + "\n";
                    }
                }

            } else if (mapOverlays[i].type == "polyline") {
                tmpOverlay.path = new Array();
                path = mapOverlays[i].getPath();
                for (var j = 0; j < path.length; j++) {
                    tmpOverlay.path[j] = { lat: path.getAt(j).lat().toString(), lng: path.getAt(j).lng().toString() };
                }

            } else if (mapOverlays[i].type == "circle") {
                tmpOverlay.center = { lat: mapOverlays[i].getCenter().lat(), lng: mapOverlays[i].getCenter().lng() };
                tmpOverlay.radius = mapOverlays[i].radius;
            } else if (mapOverlays[i].type == "rectangle") {
                tmpOverlay.bounds = { sw: { lat: mapOverlays[i].getBounds().getSouthWest().lat(), lng: mapOverlays[i].getBounds().getSouthWest().lng() },
                    ne: { lat: mapOverlays[i].getBounds().getNorthEast().lat(), lng: mapOverlays[i].getBounds().getNorthEast().lng() }
                };
            } else if (mapOverlays[i].type == "marker") {
                outputString += "Point " + i + "\n";
                tmpOverlay.position = { lat: mapOverlays[i].getPosition().lat(), lng: mapOverlays[i].getPosition().lng() };
                outputString += mapOverlays[i].getPosition().lat() + "," + mapOverlays[i].getPosition().lng() + "\n";
            } else {

                alert("Type: " + mapOverlays[i].type);

            }
            tmpMap.overlays.push(tmpOverlay);
        }

        return outputString;

    }
	

    function codeAddress() {
        var address = document.getElementById("address").value;
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
            } else {
                alert("Geocode was not successful for the following reason: " + status);
            }
        });
    }



    function addtext() {

        
        var tmpMap = mapToObject();
        var textOut = tmpMap.toString();
        document.getElementById("Coordinates").value = textOut;
        

    }
</script>


    
      