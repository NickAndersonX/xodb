#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XODB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XODB")]
	public partial class GeophysicsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertX_Geophysics(X_Geophysics instance);
    partial void UpdateX_Geophysics(X_Geophysics instance);
    partial void DeleteX_Geophysics(X_Geophysics instance);
    partial void InsertX_GeophysicsMetadata(X_GeophysicsMetadata instance);
    partial void UpdateX_GeophysicsMetadata(X_GeophysicsMetadata instance);
    partial void DeleteX_GeophysicsMetadata(X_GeophysicsMetadata instance);
    partial void InsertX_GeophysicsData(X_GeophysicsData instance);
    partial void UpdateX_GeophysicsData(X_GeophysicsData instance);
    partial void DeleteX_GeophysicsData(X_GeophysicsData instance);
    #endregion
		
		public GeophysicsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GeophysicsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeophysicsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeophysicsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeophysicsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<X_Geophysics> X_Geophysics
		{
			get
			{
				return this.GetTable<X_Geophysics>();
			}
		}
		
		public System.Data.Linq.Table<X_GeophysicsMetadata> X_GeophysicsMetadatas
		{
			get
			{
				return this.GetTable<X_GeophysicsMetadata>();
			}
		}
		
		public System.Data.Linq.Table<X_GeophysicsData> X_GeophysicsDatas
		{
			get
			{
				return this.GetTable<X_GeophysicsData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Geophysics")]
	public partial class X_Geophysics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GeophysicsID;
		
		private string _FileName;
		
		private System.Nullable<System.Guid> _OriginalFileDataID;
		
		private System.Nullable<System.Guid> _HeaderID;
		
		private System.Nullable<System.Guid> _DimensionUnitID;
		
		private string _LasVersion;
		
		private string _LasFormat;
		
		private string _LasWrap;
		
		private string _LasDelimiter;
		
		private string _LasNullValue;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_GeophysicsMetadata> _X_GeophysicsMetadatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeophysicsIDChanging(System.Guid value);
    partial void OnGeophysicsIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnOriginalFileDataIDChanging(System.Nullable<System.Guid> value);
    partial void OnOriginalFileDataIDChanged();
    partial void OnHeaderIDChanging(System.Nullable<System.Guid> value);
    partial void OnHeaderIDChanged();
    partial void OnDimensionUnitIDChanging(System.Nullable<System.Guid> value);
    partial void OnDimensionUnitIDChanged();
    partial void OnLasVersionChanging(string value);
    partial void OnLasVersionChanged();
    partial void OnLasFormatChanging(string value);
    partial void OnLasFormatChanged();
    partial void OnLasWrapChanging(string value);
    partial void OnLasWrapChanged();
    partial void OnLasDelimiterChanging(string value);
    partial void OnLasDelimiterChanged();
    partial void OnLasNullValueChanging(string value);
    partial void OnLasNullValueChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_Geophysics()
		{
			this._X_GeophysicsMetadatas = new EntitySet<X_GeophysicsMetadata>(new Action<X_GeophysicsMetadata>(this.attach_X_GeophysicsMetadatas), new Action<X_GeophysicsMetadata>(this.detach_X_GeophysicsMetadatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeophysicsID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GeophysicsID
		{
			get
			{
				return this._GeophysicsID;
			}
			set
			{
				if ((this._GeophysicsID != value))
				{
					this.OnGeophysicsIDChanging(value);
					this.SendPropertyChanging();
					this._GeophysicsID = value;
					this.SendPropertyChanged("GeophysicsID");
					this.OnGeophysicsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalFileDataID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OriginalFileDataID
		{
			get
			{
				return this._OriginalFileDataID;
			}
			set
			{
				if ((this._OriginalFileDataID != value))
				{
					this.OnOriginalFileDataIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalFileDataID = value;
					this.SendPropertyChanged("OriginalFileDataID");
					this.OnOriginalFileDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> HeaderID
		{
			get
			{
				return this._HeaderID;
			}
			set
			{
				if ((this._HeaderID != value))
				{
					this.OnHeaderIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderID = value;
					this.SendPropertyChanged("HeaderID");
					this.OnHeaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DimensionUnitID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DimensionUnitID
		{
			get
			{
				return this._DimensionUnitID;
			}
			set
			{
				if ((this._DimensionUnitID != value))
				{
					this.OnDimensionUnitIDChanging(value);
					this.SendPropertyChanging();
					this._DimensionUnitID = value;
					this.SendPropertyChanged("DimensionUnitID");
					this.OnDimensionUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LasVersion", DbType="NVarChar(16)")]
		public string LasVersion
		{
			get
			{
				return this._LasVersion;
			}
			set
			{
				if ((this._LasVersion != value))
				{
					this.OnLasVersionChanging(value);
					this.SendPropertyChanging();
					this._LasVersion = value;
					this.SendPropertyChanged("LasVersion");
					this.OnLasVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LasFormat", DbType="NVarChar(16)")]
		public string LasFormat
		{
			get
			{
				return this._LasFormat;
			}
			set
			{
				if ((this._LasFormat != value))
				{
					this.OnLasFormatChanging(value);
					this.SendPropertyChanging();
					this._LasFormat = value;
					this.SendPropertyChanged("LasFormat");
					this.OnLasFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LasWrap", DbType="NVarChar(16)")]
		public string LasWrap
		{
			get
			{
				return this._LasWrap;
			}
			set
			{
				if ((this._LasWrap != value))
				{
					this.OnLasWrapChanging(value);
					this.SendPropertyChanging();
					this._LasWrap = value;
					this.SendPropertyChanged("LasWrap");
					this.OnLasWrapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LasDelimiter", DbType="NVarChar(16)")]
		public string LasDelimiter
		{
			get
			{
				return this._LasDelimiter;
			}
			set
			{
				if ((this._LasDelimiter != value))
				{
					this.OnLasDelimiterChanging(value);
					this.SendPropertyChanging();
					this._LasDelimiter = value;
					this.SendPropertyChanged("LasDelimiter");
					this.OnLasDelimiterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LasNullValue", DbType="NVarChar(16)")]
		public string LasNullValue
		{
			get
			{
				return this._LasNullValue;
			}
			set
			{
				if ((this._LasNullValue != value))
				{
					this.OnLasNullValueChanging(value);
					this.SendPropertyChanging();
					this._LasNullValue = value;
					this.SendPropertyChanged("LasNullValue");
					this.OnLasNullValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Geophysic_X_GeophysicsMetadata", Storage="_X_GeophysicsMetadatas", ThisKey="GeophysicsID", OtherKey="GeophysicsID")]
		public EntitySet<X_GeophysicsMetadata> X_GeophysicsMetadatas
		{
			get
			{
				return this._X_GeophysicsMetadatas;
			}
			set
			{
				this._X_GeophysicsMetadatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_GeophysicsMetadatas(X_GeophysicsMetadata entity)
		{
			this.SendPropertyChanging();
			entity.X_Geophysics = this;
		}
		
		private void detach_X_GeophysicsMetadatas(X_GeophysicsMetadata entity)
		{
			this.SendPropertyChanging();
			entity.X_Geophysics = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_GeophysicsMetadata")]
	public partial class X_GeophysicsMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GeophysicsMetadataID;
		
		private System.Guid _GeophysicsID;
		
		private System.Nullable<System.Guid> _ParameterID;
		
		private string _Mnemonic;
		
		private string _Unit;
		
		private string _Data;
		
		private string _Code;
		
		private string _Description;
		
		private string _Format;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_GeophysicsData> _X_GeophysicsDatas;
		
		private EntityRef<X_Geophysics> _X_Geophysics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeophysicsMetadataIDChanging(System.Guid value);
    partial void OnGeophysicsMetadataIDChanged();
    partial void OnGeophysicsIDChanging(System.Guid value);
    partial void OnGeophysicsIDChanged();
    partial void OnParameterIDChanging(System.Nullable<System.Guid> value);
    partial void OnParameterIDChanged();
    partial void OnMnemonicChanging(string value);
    partial void OnMnemonicChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFormatChanging(string value);
    partial void OnFormatChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_GeophysicsMetadata()
		{
			this._X_GeophysicsDatas = new EntitySet<X_GeophysicsData>(new Action<X_GeophysicsData>(this.attach_X_GeophysicsDatas), new Action<X_GeophysicsData>(this.detach_X_GeophysicsDatas));
			this._X_Geophysics = default(EntityRef<X_Geophysics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeophysicsMetadataID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GeophysicsMetadataID
		{
			get
			{
				return this._GeophysicsMetadataID;
			}
			set
			{
				if ((this._GeophysicsMetadataID != value))
				{
					this.OnGeophysicsMetadataIDChanging(value);
					this.SendPropertyChanging();
					this._GeophysicsMetadataID = value;
					this.SendPropertyChanged("GeophysicsMetadataID");
					this.OnGeophysicsMetadataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeophysicsID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GeophysicsID
		{
			get
			{
				return this._GeophysicsID;
			}
			set
			{
				if ((this._GeophysicsID != value))
				{
					if (this._X_Geophysics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeophysicsIDChanging(value);
					this.SendPropertyChanging();
					this._GeophysicsID = value;
					this.SendPropertyChanged("GeophysicsID");
					this.OnGeophysicsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mnemonic", DbType="NVarChar(16)")]
		public string Mnemonic
		{
			get
			{
				return this._Mnemonic;
			}
			set
			{
				if ((this._Mnemonic != value))
				{
					this.OnMnemonicChanging(value);
					this.SendPropertyChanging();
					this._Mnemonic = value;
					this.SendPropertyChanged("Mnemonic");
					this.OnMnemonicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(MAX)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Format", DbType="NVarChar(MAX)")]
		public string Format
		{
			get
			{
				return this._Format;
			}
			set
			{
				if ((this._Format != value))
				{
					this.OnFormatChanging(value);
					this.SendPropertyChanging();
					this._Format = value;
					this.SendPropertyChanged("Format");
					this.OnFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_GeophysicsMetadata_X_GeophysicsData", Storage="_X_GeophysicsDatas", ThisKey="GeophysicsMetadataID", OtherKey="GeophysicsMetadataID")]
		public EntitySet<X_GeophysicsData> X_GeophysicsDatas
		{
			get
			{
				return this._X_GeophysicsDatas;
			}
			set
			{
				this._X_GeophysicsDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Geophysic_X_GeophysicsMetadata", Storage="_X_Geophysics", ThisKey="GeophysicsID", OtherKey="GeophysicsID", IsForeignKey=true)]
		public X_Geophysics X_Geophysics
		{
			get
			{
				return this._X_Geophysics.Entity;
			}
			set
			{
				X_Geophysics previousValue = this._X_Geophysics.Entity;
				if (((previousValue != value) 
							|| (this._X_Geophysics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Geophysics.Entity = null;
						previousValue.X_GeophysicsMetadatas.Remove(this);
					}
					this._X_Geophysics.Entity = value;
					if ((value != null))
					{
						value.X_GeophysicsMetadatas.Add(this);
						this._GeophysicsID = value.GeophysicsID;
					}
					else
					{
						this._GeophysicsID = default(System.Guid);
					}
					this.SendPropertyChanged("X_Geophysics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_GeophysicsDatas(X_GeophysicsData entity)
		{
			this.SendPropertyChanging();
			entity.X_GeophysicsMetadata = this;
		}
		
		private void detach_X_GeophysicsDatas(X_GeophysicsData entity)
		{
			this.SendPropertyChanging();
			entity.X_GeophysicsMetadata = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_GeophysicsData")]
	public partial class X_GeophysicsData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GeophysicsDataID;
		
		private System.Guid _GeophysicsMetadataID;
		
		private decimal _Dimension;
		
		private System.Nullable<decimal> _MeasurementValue;
		
		private string _MeasurementText;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<X_GeophysicsMetadata> _X_GeophysicsMetadata;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeophysicsDataIDChanging(System.Guid value);
    partial void OnGeophysicsDataIDChanged();
    partial void OnGeophysicsMetadataIDChanging(System.Guid value);
    partial void OnGeophysicsMetadataIDChanged();
    partial void OnDimensionChanging(decimal value);
    partial void OnDimensionChanged();
    partial void OnMeasurementValueChanging(System.Nullable<decimal> value);
    partial void OnMeasurementValueChanged();
    partial void OnMeasurementTextChanging(string value);
    partial void OnMeasurementTextChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_GeophysicsData()
		{
			this._X_GeophysicsMetadata = default(EntityRef<X_GeophysicsMetadata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeophysicsDataID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GeophysicsDataID
		{
			get
			{
				return this._GeophysicsDataID;
			}
			set
			{
				if ((this._GeophysicsDataID != value))
				{
					this.OnGeophysicsDataIDChanging(value);
					this.SendPropertyChanging();
					this._GeophysicsDataID = value;
					this.SendPropertyChanged("GeophysicsDataID");
					this.OnGeophysicsDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeophysicsMetadataID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GeophysicsMetadataID
		{
			get
			{
				return this._GeophysicsMetadataID;
			}
			set
			{
				if ((this._GeophysicsMetadataID != value))
				{
					if (this._X_GeophysicsMetadata.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeophysicsMetadataIDChanging(value);
					this.SendPropertyChanging();
					this._GeophysicsMetadataID = value;
					this.SendPropertyChanged("GeophysicsMetadataID");
					this.OnGeophysicsMetadataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dimension", DbType="Decimal(38,20) NOT NULL")]
		public decimal Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this.OnDimensionChanging(value);
					this.SendPropertyChanging();
					this._Dimension = value;
					this.SendPropertyChanged("Dimension");
					this.OnDimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementValue", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> MeasurementValue
		{
			get
			{
				return this._MeasurementValue;
			}
			set
			{
				if ((this._MeasurementValue != value))
				{
					this.OnMeasurementValueChanging(value);
					this.SendPropertyChanging();
					this._MeasurementValue = value;
					this.SendPropertyChanged("MeasurementValue");
					this.OnMeasurementValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementText", DbType="NVarChar(MAX)")]
		public string MeasurementText
		{
			get
			{
				return this._MeasurementText;
			}
			set
			{
				if ((this._MeasurementText != value))
				{
					this.OnMeasurementTextChanging(value);
					this.SendPropertyChanging();
					this._MeasurementText = value;
					this.SendPropertyChanged("MeasurementText");
					this.OnMeasurementTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_GeophysicsMetadata_X_GeophysicsData", Storage="_X_GeophysicsMetadata", ThisKey="GeophysicsMetadataID", OtherKey="GeophysicsMetadataID", IsForeignKey=true)]
		public X_GeophysicsMetadata X_GeophysicsMetadata
		{
			get
			{
				return this._X_GeophysicsMetadata.Entity;
			}
			set
			{
				X_GeophysicsMetadata previousValue = this._X_GeophysicsMetadata.Entity;
				if (((previousValue != value) 
							|| (this._X_GeophysicsMetadata.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_GeophysicsMetadata.Entity = null;
						previousValue.X_GeophysicsDatas.Remove(this);
					}
					this._X_GeophysicsMetadata.Entity = value;
					if ((value != null))
					{
						value.X_GeophysicsDatas.Add(this);
						this._GeophysicsMetadataID = value.GeophysicsMetadataID;
					}
					else
					{
						this._GeophysicsMetadataID = default(System.Guid);
					}
					this.SendPropertyChanged("X_GeophysicsMetadata");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
