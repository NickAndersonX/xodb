#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XODB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XODB")]
	public partial class InternalsContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPrivateData(PrivateData instance);
    partial void UpdatePrivateData(PrivateData instance);
    partial void DeletePrivateData(PrivateData instance);
    partial void InsertMetaData(MetaData instance);
    partial void UpdateMetaData(MetaData instance);
    partial void DeleteMetaData(MetaData instance);
    partial void InsertMetaDataRelation(MetaDataRelation instance);
    partial void UpdateMetaDataRelation(MetaDataRelation instance);
    partial void DeleteMetaDataRelation(MetaDataRelation instance);
    #endregion
		
		public InternalsContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InternalsContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InternalsContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InternalsContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InternalsContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PrivateData> PrivateDatas
		{
			get
			{
				return this.GetTable<PrivateData>();
			}
		}
		
		public System.Data.Linq.Table<MetaData> MetaDatas
		{
			get
			{
				return this.GetTable<MetaData>();
			}
		}
		
		public System.Data.Linq.Table<MetaDataRelation> MetaDataRelations
		{
			get
			{
				return this.GetTable<MetaDataRelation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_PrivateData")]
	public partial class PrivateData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PrivateDataID;
		
		private string _UniqueID;
		
		private string _UniqueIDSystemDataType;
		
		private string _TableType;
		
		private System.Nullable<System.Guid> _ReferenceID;
		
		private string _UserDataType;
		
		private string _Value;
		
		private string _SystemDataType;
		
		private System.Nullable<bool> _IsReadOnly;
		
		private System.Nullable<bool> _IsVisible;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivateDataIDChanging(System.Guid value);
    partial void OnPrivateDataIDChanged();
    partial void OnUniqueIDChanging(string value);
    partial void OnUniqueIDChanged();
    partial void OnUniqueIDSystemDataTypeChanging(string value);
    partial void OnUniqueIDSystemDataTypeChanged();
    partial void OnTableTypeChanging(string value);
    partial void OnTableTypeChanged();
    partial void OnReferenceIDChanging(System.Nullable<System.Guid> value);
    partial void OnReferenceIDChanged();
    partial void OnUserDataTypeChanging(string value);
    partial void OnUserDataTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnSystemDataTypeChanging(string value);
    partial void OnSystemDataTypeChanged();
    partial void OnIsReadOnlyChanging(System.Nullable<bool> value);
    partial void OnIsReadOnlyChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public PrivateData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateDataID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PrivateDataID
		{
			get
			{
				return this._PrivateDataID;
			}
			set
			{
				if ((this._PrivateDataID != value))
				{
					this.OnPrivateDataIDChanging(value);
					this.SendPropertyChanging();
					this._PrivateDataID = value;
					this.SendPropertyChanged("PrivateDataID");
					this.OnPrivateDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", DbType="NVarChar(255)")]
		public string UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueIDSystemDataType", DbType="NVarChar(255)")]
		public string UniqueIDSystemDataType
		{
			get
			{
				return this._UniqueIDSystemDataType;
			}
			set
			{
				if ((this._UniqueIDSystemDataType != value))
				{
					this.OnUniqueIDSystemDataTypeChanging(value);
					this.SendPropertyChanging();
					this._UniqueIDSystemDataType = value;
					this.SendPropertyChanged("UniqueIDSystemDataType");
					this.OnUniqueIDSystemDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableType", DbType="NVarChar(50)")]
		public string TableType
		{
			get
			{
				return this._TableType;
			}
			set
			{
				if ((this._TableType != value))
				{
					this.OnTableTypeChanging(value);
					this.SendPropertyChanging();
					this._TableType = value;
					this.SendPropertyChanged("TableType");
					this.OnTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReferenceID
		{
			get
			{
				return this._ReferenceID;
			}
			set
			{
				if ((this._ReferenceID != value))
				{
					this.OnReferenceIDChanging(value);
					this.SendPropertyChanging();
					this._ReferenceID = value;
					this.SendPropertyChanged("ReferenceID");
					this.OnReferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDataType", DbType="NVarChar(50)")]
		public string UserDataType
		{
			get
			{
				return this._UserDataType;
			}
			set
			{
				if ((this._UserDataType != value))
				{
					this.OnUserDataTypeChanging(value);
					this.SendPropertyChanging();
					this._UserDataType = value;
					this.SendPropertyChanged("UserDataType");
					this.OnUserDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemDataType", DbType="NVarChar(255)")]
		public string SystemDataType
		{
			get
			{
				return this._SystemDataType;
			}
			set
			{
				if ((this._SystemDataType != value))
				{
					this.OnSystemDataTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemDataType = value;
					this.SendPropertyChanged("SystemDataType");
					this.OnSystemDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReadOnly", DbType="Bit")]
		public System.Nullable<bool> IsReadOnly
		{
			get
			{
				return this._IsReadOnly;
			}
			set
			{
				if ((this._IsReadOnly != value))
				{
					this.OnIsReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._IsReadOnly = value;
					this.SendPropertyChanged("IsReadOnly");
					this.OnIsReadOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_MetaData")]
	public partial class MetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MetaDataID;
		
		private string _MetaDataType;
		
		private string _ContentToIndex;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<MetaDataRelation> _MetaDataRelations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetaDataIDChanging(System.Guid value);
    partial void OnMetaDataIDChanged();
    partial void OnMetaDataTypeChanging(string value);
    partial void OnMetaDataTypeChanged();
    partial void OnContentToIndexChanging(string value);
    partial void OnContentToIndexChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public MetaData()
		{
			this._MetaDataRelations = new EntitySet<MetaDataRelation>(new Action<MetaDataRelation>(this.attach_MetaDataRelations), new Action<MetaDataRelation>(this.detach_MetaDataRelations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDataID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetaDataID
		{
			get
			{
				return this._MetaDataID;
			}
			set
			{
				if ((this._MetaDataID != value))
				{
					this.OnMetaDataIDChanging(value);
					this.SendPropertyChanging();
					this._MetaDataID = value;
					this.SendPropertyChanged("MetaDataID");
					this.OnMetaDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDataType", DbType="NVarChar(50)")]
		public string MetaDataType
		{
			get
			{
				return this._MetaDataType;
			}
			set
			{
				if ((this._MetaDataType != value))
				{
					this.OnMetaDataTypeChanging(value);
					this.SendPropertyChanging();
					this._MetaDataType = value;
					this.SendPropertyChanged("MetaDataType");
					this.OnMetaDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentToIndex", DbType="NVarChar(MAX)")]
		public string ContentToIndex
		{
			get
			{
				return this._ContentToIndex;
			}
			set
			{
				if ((this._ContentToIndex != value))
				{
					this.OnContentToIndexChanging(value);
					this.SendPropertyChanging();
					this._ContentToIndex = value;
					this.SendPropertyChanged("ContentToIndex");
					this.OnContentToIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetaData_MetaDataRelation", Storage="_MetaDataRelations", ThisKey="MetaDataID", OtherKey="MetaDataID")]
		public EntitySet<MetaDataRelation> MetaDataRelations
		{
			get
			{
				return this._MetaDataRelations;
			}
			set
			{
				this._MetaDataRelations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MetaDataRelations(MetaDataRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetaData = this;
		}
		
		private void detach_MetaDataRelations(MetaDataRelation entity)
		{
			this.SendPropertyChanging();
			entity.MetaData = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_MetaDataRelation")]
	public partial class MetaDataRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MetaDataRelationID;
		
		private System.Guid _MetaDataID;
		
		private string _TableType;
		
		private System.Guid _ReferenceID;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<MetaData> _MetaData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetaDataRelationIDChanging(System.Guid value);
    partial void OnMetaDataRelationIDChanged();
    partial void OnMetaDataIDChanging(System.Guid value);
    partial void OnMetaDataIDChanged();
    partial void OnTableTypeChanging(string value);
    partial void OnTableTypeChanged();
    partial void OnReferenceIDChanging(System.Guid value);
    partial void OnReferenceIDChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public MetaDataRelation()
		{
			this._MetaData = default(EntityRef<MetaData>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDataRelationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MetaDataRelationID
		{
			get
			{
				return this._MetaDataRelationID;
			}
			set
			{
				if ((this._MetaDataRelationID != value))
				{
					this.OnMetaDataRelationIDChanging(value);
					this.SendPropertyChanging();
					this._MetaDataRelationID = value;
					this.SendPropertyChanged("MetaDataRelationID");
					this.OnMetaDataRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDataID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaDataID
		{
			get
			{
				return this._MetaDataID;
			}
			set
			{
				if ((this._MetaDataID != value))
				{
					if (this._MetaData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaDataIDChanging(value);
					this.SendPropertyChanging();
					this._MetaDataID = value;
					this.SendPropertyChanged("MetaDataID");
					this.OnMetaDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TableType
		{
			get
			{
				return this._TableType;
			}
			set
			{
				if ((this._TableType != value))
				{
					this.OnTableTypeChanging(value);
					this.SendPropertyChanging();
					this._TableType = value;
					this.SendPropertyChanged("TableType");
					this.OnTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ReferenceID
		{
			get
			{
				return this._ReferenceID;
			}
			set
			{
				if ((this._ReferenceID != value))
				{
					this.OnReferenceIDChanging(value);
					this.SendPropertyChanging();
					this._ReferenceID = value;
					this.SendPropertyChanged("ReferenceID");
					this.OnReferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetaData_MetaDataRelation", Storage="_MetaData", ThisKey="MetaDataID", OtherKey="MetaDataID", IsForeignKey=true)]
		public MetaData MetaData
		{
			get
			{
				return this._MetaData.Entity;
			}
			set
			{
				MetaData previousValue = this._MetaData.Entity;
				if (((previousValue != value) 
							|| (this._MetaData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetaData.Entity = null;
						previousValue.MetaDataRelations.Remove(this);
					}
					this._MetaData.Entity = value;
					if ((value != null))
					{
						value.MetaDataRelations.Add(this);
						this._MetaDataID = value.MetaDataID;
					}
					else
					{
						this._MetaDataID = default(System.Guid);
					}
					this.SendPropertyChanged("MetaData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
