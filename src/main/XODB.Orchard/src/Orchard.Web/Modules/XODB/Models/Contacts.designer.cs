#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XODB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XODB")]
	public partial class ContactsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyRelation(CompanyRelation instance);
    partial void UpdateCompanyRelation(CompanyRelation instance);
    partial void DeleteCompanyRelation(CompanyRelation instance);
    partial void InsertCompanyAddress(CompanyAddress instance);
    partial void UpdateCompanyAddress(CompanyAddress instance);
    partial void DeleteCompanyAddress(CompanyAddress instance);
    partial void InsertSecurityBlacklist(SecurityBlacklist instance);
    partial void UpdateSecurityBlacklist(SecurityBlacklist instance);
    partial void DeleteSecurityBlacklist(SecurityBlacklist instance);
    partial void InsertSecurityWhitelist(SecurityWhitelist instance);
    partial void UpdateSecurityWhitelist(SecurityWhitelist instance);
    partial void DeleteSecurityWhitelist(SecurityWhitelist instance);
    partial void InsertExperience(Experience instance);
    partial void UpdateExperience(Experience instance);
    partial void DeleteExperience(Experience instance);
    #endregion
		
		public ContactsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyRelation> CompanyRelations
		{
			get
			{
				return this.GetTable<CompanyRelation>();
			}
		}
		
		public System.Data.Linq.Table<CompanyAddress> CompanyAddresses
		{
			get
			{
				return this.GetTable<CompanyAddress>();
			}
		}
		
		public System.Data.Linq.Table<SecurityBlacklist> SecurityBlacklists
		{
			get
			{
				return this.GetTable<SecurityBlacklist>();
			}
		}
		
		public System.Data.Linq.Table<SecurityWhitelist> SecurityWhitelists
		{
			get
			{
				return this.GetTable<SecurityWhitelist>();
			}
		}
		
		public System.Data.Linq.Table<Experience> Experiences
		{
			get
			{
				return this.GetTable<Experience>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactID;
		
		private string _ContactName;
		
		private string _Title;
		
		private string _Surname;
		
		private string _Firstname;
		
		private string _Username;
		
		private string _DefaultEmail;
		
		private string _MiddleNames;
		
		private string _Initials;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _BirthCountryID;
		
		private string _BirthCity;
		
		private System.Nullable<System.Guid> _AspNetUserID;
		
		private System.Nullable<System.Guid> _XafUserID;
		
		private string _OAuthID;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _ShortBiography;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<SecurityBlacklist> _SecurityBlacklists;
		
		private EntitySet<SecurityWhitelist> _X_SecurityWhitelists;
		
		private EntitySet<SecurityWhitelist> _SecurityWhitelists;
		
		private EntitySet<Experience> _Experiences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(System.Guid value);
    partial void OnContactIDChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDefaultEmailChanging(string value);
    partial void OnDefaultEmailChanged();
    partial void OnMiddleNamesChanging(string value);
    partial void OnMiddleNamesChanged();
    partial void OnInitialsChanging(string value);
    partial void OnInitialsChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnBirthCountryIDChanging(string value);
    partial void OnBirthCountryIDChanged();
    partial void OnBirthCityChanging(string value);
    partial void OnBirthCityChanged();
    partial void OnAspNetUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnAspNetUserIDChanged();
    partial void OnXafUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnXafUserIDChanged();
    partial void OnOAuthIDChanging(string value);
    partial void OnOAuthIDChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnShortBiographyChanging(string value);
    partial void OnShortBiographyChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public Contact()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._SecurityBlacklists = new EntitySet<SecurityBlacklist>(new Action<SecurityBlacklist>(this.attach_SecurityBlacklists), new Action<SecurityBlacklist>(this.detach_SecurityBlacklists));
			this._X_SecurityWhitelists = new EntitySet<SecurityWhitelist>(new Action<SecurityWhitelist>(this.attach_X_SecurityWhitelists), new Action<SecurityWhitelist>(this.detach_X_SecurityWhitelists));
			this._SecurityWhitelists = new EntitySet<SecurityWhitelist>(new Action<SecurityWhitelist>(this.attach_SecurityWhitelists), new Action<SecurityWhitelist>(this.detach_SecurityWhitelists));
			this._Experiences = new EntitySet<Experience>(new Action<Experience>(this.attach_Experiences), new Action<Experience>(this.detach_Experiences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(120) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(16)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultEmail", DbType="NVarChar(255)")]
		public string DefaultEmail
		{
			get
			{
				return this._DefaultEmail;
			}
			set
			{
				if ((this._DefaultEmail != value))
				{
					this.OnDefaultEmailChanging(value);
					this.SendPropertyChanging();
					this._DefaultEmail = value;
					this.SendPropertyChanged("DefaultEmail");
					this.OnDefaultEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleNames", DbType="NVarChar(60)")]
		public string MiddleNames
		{
			get
			{
				return this._MiddleNames;
			}
			set
			{
				if ((this._MiddleNames != value))
				{
					this.OnMiddleNamesChanging(value);
					this.SendPropertyChanging();
					this._MiddleNames = value;
					this.SendPropertyChanged("MiddleNames");
					this.OnMiddleNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initials", DbType="NVarChar(16)")]
		public string Initials
		{
			get
			{
				return this._Initials;
			}
			set
			{
				if ((this._Initials != value))
				{
					this.OnInitialsChanging(value);
					this.SendPropertyChanging();
					this._Initials = value;
					this.SendPropertyChanged("Initials");
					this.OnInitialsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCountryID", DbType="NVarChar(2)")]
		public string BirthCountryID
		{
			get
			{
				return this._BirthCountryID;
			}
			set
			{
				if ((this._BirthCountryID != value))
				{
					this.OnBirthCountryIDChanging(value);
					this.SendPropertyChanging();
					this._BirthCountryID = value;
					this.SendPropertyChanged("BirthCountryID");
					this.OnBirthCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCity", DbType="NVarChar(60)")]
		public string BirthCity
		{
			get
			{
				return this._BirthCity;
			}
			set
			{
				if ((this._BirthCity != value))
				{
					this.OnBirthCityChanging(value);
					this.SendPropertyChanging();
					this._BirthCity = value;
					this.SendPropertyChanged("BirthCity");
					this.OnBirthCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspNetUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AspNetUserID
		{
			get
			{
				return this._AspNetUserID;
			}
			set
			{
				if ((this._AspNetUserID != value))
				{
					this.OnAspNetUserIDChanging(value);
					this.SendPropertyChanging();
					this._AspNetUserID = value;
					this.SendPropertyChanged("AspNetUserID");
					this.OnAspNetUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XafUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> XafUserID
		{
			get
			{
				return this._XafUserID;
			}
			set
			{
				if ((this._XafUserID != value))
				{
					this.OnXafUserIDChanging(value);
					this.SendPropertyChanging();
					this._XafUserID = value;
					this.SendPropertyChanged("XafUserID");
					this.OnXafUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OAuthID", DbType="NVarChar(256)")]
		public string OAuthID
		{
			get
			{
				return this._OAuthID;
			}
			set
			{
				if ((this._OAuthID != value))
				{
					this.OnOAuthIDChanging(value);
					this.SendPropertyChanging();
					this._OAuthID = value;
					this.SendPropertyChanged("OAuthID");
					this.OnOAuthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortBiography", DbType="NVarChar(MAX)")]
		public string ShortBiography
		{
			get
			{
				return this._ShortBiography;
			}
			set
			{
				if ((this._ShortBiography != value))
				{
					this.OnShortBiographyChanging(value);
					this.SendPropertyChanging();
					this._ShortBiography = value;
					this.SendPropertyChanged("ShortBiography");
					this.OnShortBiographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Company", Storage="_Companies", ThisKey="ContactID", OtherKey="PrimaryContactID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityBlacklist", Storage="_SecurityBlacklists", ThisKey="ContactID", OtherKey="AccessorContactID")]
		public EntitySet<SecurityBlacklist> SecurityBlacklists
		{
			get
			{
				return this._SecurityBlacklists;
			}
			set
			{
				this._SecurityBlacklists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityWhitelist", Storage="_X_SecurityWhitelists", ThisKey="ContactID", OtherKey="AccessorContactID")]
		public EntitySet<SecurityWhitelist> X_SecurityWhitelists
		{
			get
			{
				return this._X_SecurityWhitelists;
			}
			set
			{
				this._X_SecurityWhitelists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityWhitelist1", Storage="_SecurityWhitelists", ThisKey="ContactID", OtherKey="AccessorContactID")]
		public EntitySet<SecurityWhitelist> SecurityWhitelists
		{
			get
			{
				return this._SecurityWhitelists;
			}
			set
			{
				this._SecurityWhitelists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_X_Experience", Storage="_Experiences", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<Experience> Experiences
		{
			get
			{
				return this._Experiences;
			}
			set
			{
				this._Experiences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_X_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_X_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_Experiences(Experience entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Experiences(Experience entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Role> _Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Application()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_User", Storage="_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Role", Storage="_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public User()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_User", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UsersInRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_Role", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private string _CompanyName;
		
		private string _CountryID;
		
		private System.Nullable<System.Guid> _PrimaryContactID;
		
		private string _Comment;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<CompanyRelation> _X_CompanyRelations;
		
		private EntitySet<CompanyRelation> _CompanyRelations;
		
		private EntitySet<CompanyAddress> _CompanyAddresses;
		
		private EntitySet<SecurityBlacklist> _X_SecurityBlacklists;
		
		private EntitySet<SecurityBlacklist> _SecurityBlacklists;
		
		private EntitySet<SecurityWhitelist> _X_SecurityWhitelists;
		
		private EntitySet<SecurityWhitelist> _SecurityWhitelists;
		
		private EntitySet<Experience> _Experiences;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCountryIDChanging(string value);
    partial void OnCountryIDChanged();
    partial void OnPrimaryContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryContactIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public Company()
		{
			this._X_CompanyRelations = new EntitySet<CompanyRelation>(new Action<CompanyRelation>(this.attach_X_CompanyRelations), new Action<CompanyRelation>(this.detach_X_CompanyRelations));
			this._CompanyRelations = new EntitySet<CompanyRelation>(new Action<CompanyRelation>(this.attach_CompanyRelations), new Action<CompanyRelation>(this.detach_CompanyRelations));
			this._CompanyAddresses = new EntitySet<CompanyAddress>(new Action<CompanyAddress>(this.attach_CompanyAddresses), new Action<CompanyAddress>(this.detach_CompanyAddresses));
			this._X_SecurityBlacklists = new EntitySet<SecurityBlacklist>(new Action<SecurityBlacklist>(this.attach_X_SecurityBlacklists), new Action<SecurityBlacklist>(this.detach_X_SecurityBlacklists));
			this._SecurityBlacklists = new EntitySet<SecurityBlacklist>(new Action<SecurityBlacklist>(this.attach_SecurityBlacklists), new Action<SecurityBlacklist>(this.detach_SecurityBlacklists));
			this._X_SecurityWhitelists = new EntitySet<SecurityWhitelist>(new Action<SecurityWhitelist>(this.attach_X_SecurityWhitelists), new Action<SecurityWhitelist>(this.detach_X_SecurityWhitelists));
			this._SecurityWhitelists = new EntitySet<SecurityWhitelist>(new Action<SecurityWhitelist>(this.attach_SecurityWhitelists), new Action<SecurityWhitelist>(this.detach_SecurityWhitelists));
			this._Experiences = new EntitySet<Experience>(new Action<Experience>(this.attach_Experiences), new Action<Experience>(this.detach_Experiences));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(255)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="NVarChar(2)")]
		public string CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryContactID
		{
			get
			{
				return this._PrimaryContactID;
			}
			set
			{
				if ((this._PrimaryContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryContactIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContactID = value;
					this.SendPropertyChanged("PrimaryContactID");
					this.OnPrimaryContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyRelation", Storage="_X_CompanyRelations", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<CompanyRelation> X_CompanyRelations
		{
			get
			{
				return this._X_CompanyRelations;
			}
			set
			{
				this._X_CompanyRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyRelation1", Storage="_CompanyRelations", ThisKey="CompanyID", OtherKey="ParentCompanyID")]
		public EntitySet<CompanyRelation> CompanyRelations
		{
			get
			{
				return this._CompanyRelations;
			}
			set
			{
				this._CompanyRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyAddress", Storage="_CompanyAddresses", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<CompanyAddress> CompanyAddresses
		{
			get
			{
				return this._CompanyAddresses;
			}
			set
			{
				this._CompanyAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityBlacklist", Storage="_X_SecurityBlacklists", ThisKey="CompanyID", OtherKey="OwnerCompanyID")]
		public EntitySet<SecurityBlacklist> X_SecurityBlacklists
		{
			get
			{
				return this._X_SecurityBlacklists;
			}
			set
			{
				this._X_SecurityBlacklists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityBlacklist1", Storage="_SecurityBlacklists", ThisKey="CompanyID", OtherKey="AccessorCompanyID")]
		public EntitySet<SecurityBlacklist> SecurityBlacklists
		{
			get
			{
				return this._SecurityBlacklists;
			}
			set
			{
				this._SecurityBlacklists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityWhitelist", Storage="_X_SecurityWhitelists", ThisKey="CompanyID", OtherKey="OwnerCompanyID")]
		public EntitySet<SecurityWhitelist> X_SecurityWhitelists
		{
			get
			{
				return this._X_SecurityWhitelists;
			}
			set
			{
				this._X_SecurityWhitelists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityWhitelist1", Storage="_SecurityWhitelists", ThisKey="CompanyID", OtherKey="AccessorCompanyID")]
		public EntitySet<SecurityWhitelist> SecurityWhitelists
		{
			get
			{
				return this._SecurityWhitelists;
			}
			set
			{
				this._SecurityWhitelists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_X_Experience", Storage="_Experiences", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Experience> Experiences
		{
			get
			{
				return this._Experiences;
			}
			set
			{
				this._Experiences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Company", Storage="_Contact", ThisKey="PrimaryContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PrimaryContactID = value.ContactID;
					}
					else
					{
						this._PrimaryContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_CompanyRelations(CompanyRelation entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = this;
		}
		
		private void detach_X_CompanyRelations(CompanyRelation entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = null;
		}
		
		private void attach_CompanyRelations(CompanyRelation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyRelations(CompanyRelation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CompanyAddresses(CompanyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyAddresses(CompanyAddress entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_X_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = this;
		}
		
		private void detach_X_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = null;
		}
		
		private void attach_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_SecurityBlacklists(SecurityBlacklist entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_X_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = this;
		}
		
		private void detach_X_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.X_Company = null;
		}
		
		private void attach_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_SecurityWhitelists(SecurityWhitelist entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Experiences(Experience entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Experiences(Experience entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_CompanyRelation")]
	public partial class CompanyRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyRelationID;
		
		private System.Guid _CompanyID;
		
		private System.Guid _ParentCompanyID;
		
		private bool _IsChildVisible;
		
		private bool _IsParentVisible;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<Company> _X_Company;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyRelationIDChanging(System.Guid value);
    partial void OnCompanyRelationIDChanged();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnParentCompanyIDChanging(System.Guid value);
    partial void OnParentCompanyIDChanged();
    partial void OnIsChildVisibleChanging(bool value);
    partial void OnIsChildVisibleChanged();
    partial void OnIsParentVisibleChanging(bool value);
    partial void OnIsParentVisibleChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public CompanyRelation()
		{
			this._X_Company = default(EntityRef<Company>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyRelationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyRelationID
		{
			get
			{
				return this._CompanyRelationID;
			}
			set
			{
				if ((this._CompanyRelationID != value))
				{
					this.OnCompanyRelationIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyRelationID = value;
					this.SendPropertyChanged("CompanyRelationID");
					this.OnCompanyRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._X_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParentCompanyID
		{
			get
			{
				return this._ParentCompanyID;
			}
			set
			{
				if ((this._ParentCompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCompanyID = value;
					this.SendPropertyChanged("ParentCompanyID");
					this.OnParentCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChildVisible", DbType="Bit NOT NULL")]
		public bool IsChildVisible
		{
			get
			{
				return this._IsChildVisible;
			}
			set
			{
				if ((this._IsChildVisible != value))
				{
					this.OnIsChildVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsChildVisible = value;
					this.SendPropertyChanged("IsChildVisible");
					this.OnIsChildVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParentVisible", DbType="Bit NOT NULL")]
		public bool IsParentVisible
		{
			get
			{
				return this._IsParentVisible;
			}
			set
			{
				if ((this._IsParentVisible != value))
				{
					this.OnIsParentVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsParentVisible = value;
					this.SendPropertyChanged("IsParentVisible");
					this.OnIsParentVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyRelation", Storage="_X_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company X_Company
		{
			get
			{
				return this._X_Company.Entity;
			}
			set
			{
				Company previousValue = this._X_Company.Entity;
				if (((previousValue != value) 
							|| (this._X_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Company.Entity = null;
						previousValue.X_CompanyRelations.Remove(this);
					}
					this._X_Company.Entity = value;
					if ((value != null))
					{
						value.X_CompanyRelations.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("X_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyRelation1", Storage="_Company", ThisKey="ParentCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyRelations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyRelations.Add(this);
						this._ParentCompanyID = value.CompanyID;
					}
					else
					{
						this._ParentCompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_CompanyAddress")]
	public partial class CompanyAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyAddressID;
		
		private System.Guid _CompanyID;
		
		private System.Guid _AddressID;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyAddressIDChanging(System.Guid value);
    partial void OnCompanyAddressIDChanged();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnAddressIDChanging(System.Guid value);
    partial void OnAddressIDChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public CompanyAddress()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAddressID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyAddressID
		{
			get
			{
				return this._CompanyAddressID;
			}
			set
			{
				if ((this._CompanyAddressID != value))
				{
					this.OnCompanyAddressIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddressID = value;
					this.SendPropertyChanged("CompanyAddressID");
					this.OnCompanyAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyAddress", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyAddresses.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyAddresses.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_SecurityBlacklist")]
	public partial class SecurityBlacklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurityBlacklistID;
		
		private System.Nullable<System.Guid> _OwnerApplicationID;
		
		private System.Nullable<System.Guid> _OwnerCompanyID;
		
		private System.Nullable<System.Guid> _OwnerContactID;
		
		private System.Nullable<System.Guid> _OwnerProjectID;
		
		private string _OwnerEntitySystemType;
		
		private string _OwnerTableType;
		
		private string _OwnerField;
		
		private System.Nullable<System.Guid> _OwnerReferenceID;
		
		private System.Nullable<System.Guid> _AccessorApplicationID;
		
		private System.Nullable<System.Guid> _AccessorCompanyID;
		
		private System.Nullable<System.Guid> _AccessorProjectID;
		
		private System.Nullable<System.Guid> _AccessorContactID;
		
		private System.Nullable<System.Guid> _AccessorRoleID;
		
		private System.Nullable<bool> _CanCreate;
		
		private System.Nullable<bool> _CanRead;
		
		private System.Nullable<bool> _CanUpdate;
		
		private System.Nullable<bool> _CanDelete;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<Company> _X_Company;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityBlacklistIDChanging(System.Guid value);
    partial void OnSecurityBlacklistIDChanged();
    partial void OnOwnerApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerApplicationIDChanged();
    partial void OnOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerCompanyIDChanged();
    partial void OnOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerContactIDChanged();
    partial void OnOwnerProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerProjectIDChanged();
    partial void OnOwnerEntitySystemTypeChanging(string value);
    partial void OnOwnerEntitySystemTypeChanged();
    partial void OnOwnerTableTypeChanging(string value);
    partial void OnOwnerTableTypeChanged();
    partial void OnOwnerFieldChanging(string value);
    partial void OnOwnerFieldChanged();
    partial void OnOwnerReferenceIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerReferenceIDChanged();
    partial void OnAccessorApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorApplicationIDChanged();
    partial void OnAccessorCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorCompanyIDChanged();
    partial void OnAccessorProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorProjectIDChanged();
    partial void OnAccessorContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorContactIDChanged();
    partial void OnAccessorRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorRoleIDChanged();
    partial void OnCanCreateChanging(System.Nullable<bool> value);
    partial void OnCanCreateChanged();
    partial void OnCanReadChanging(System.Nullable<bool> value);
    partial void OnCanReadChanged();
    partial void OnCanUpdateChanging(System.Nullable<bool> value);
    partial void OnCanUpdateChanged();
    partial void OnCanDeleteChanging(System.Nullable<bool> value);
    partial void OnCanDeleteChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public SecurityBlacklist()
		{
			this._X_Company = default(EntityRef<Company>);
			this._Company = default(EntityRef<Company>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityBlacklistID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurityBlacklistID
		{
			get
			{
				return this._SecurityBlacklistID;
			}
			set
			{
				if ((this._SecurityBlacklistID != value))
				{
					this.OnSecurityBlacklistIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityBlacklistID = value;
					this.SendPropertyChanged("SecurityBlacklistID");
					this.OnSecurityBlacklistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerApplicationID
		{
			get
			{
				return this._OwnerApplicationID;
			}
			set
			{
				if ((this._OwnerApplicationID != value))
				{
					this.OnOwnerApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerApplicationID = value;
					this.SendPropertyChanged("OwnerApplicationID");
					this.OnOwnerApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerCompanyID
		{
			get
			{
				return this._OwnerCompanyID;
			}
			set
			{
				if ((this._OwnerCompanyID != value))
				{
					if (this._X_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerCompanyID = value;
					this.SendPropertyChanged("OwnerCompanyID");
					this.OnOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerContactID
		{
			get
			{
				return this._OwnerContactID;
			}
			set
			{
				if ((this._OwnerContactID != value))
				{
					this.OnOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerContactID = value;
					this.SendPropertyChanged("OwnerContactID");
					this.OnOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerProjectID
		{
			get
			{
				return this._OwnerProjectID;
			}
			set
			{
				if ((this._OwnerProjectID != value))
				{
					this.OnOwnerProjectIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerProjectID = value;
					this.SendPropertyChanged("OwnerProjectID");
					this.OnOwnerProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerEntitySystemType", DbType="NVarChar(255)")]
		public string OwnerEntitySystemType
		{
			get
			{
				return this._OwnerEntitySystemType;
			}
			set
			{
				if ((this._OwnerEntitySystemType != value))
				{
					this.OnOwnerEntitySystemTypeChanging(value);
					this.SendPropertyChanging();
					this._OwnerEntitySystemType = value;
					this.SendPropertyChanged("OwnerEntitySystemType");
					this.OnOwnerEntitySystemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerTableType", DbType="NVarChar(50)")]
		public string OwnerTableType
		{
			get
			{
				return this._OwnerTableType;
			}
			set
			{
				if ((this._OwnerTableType != value))
				{
					this.OnOwnerTableTypeChanging(value);
					this.SendPropertyChanging();
					this._OwnerTableType = value;
					this.SendPropertyChanged("OwnerTableType");
					this.OnOwnerTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerField", DbType="NVarChar(50)")]
		public string OwnerField
		{
			get
			{
				return this._OwnerField;
			}
			set
			{
				if ((this._OwnerField != value))
				{
					this.OnOwnerFieldChanging(value);
					this.SendPropertyChanging();
					this._OwnerField = value;
					this.SendPropertyChanged("OwnerField");
					this.OnOwnerFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerReferenceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerReferenceID
		{
			get
			{
				return this._OwnerReferenceID;
			}
			set
			{
				if ((this._OwnerReferenceID != value))
				{
					this.OnOwnerReferenceIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerReferenceID = value;
					this.SendPropertyChanged("OwnerReferenceID");
					this.OnOwnerReferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorApplicationID
		{
			get
			{
				return this._AccessorApplicationID;
			}
			set
			{
				if ((this._AccessorApplicationID != value))
				{
					this.OnAccessorApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorApplicationID = value;
					this.SendPropertyChanged("AccessorApplicationID");
					this.OnAccessorApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorCompanyID
		{
			get
			{
				return this._AccessorCompanyID;
			}
			set
			{
				if ((this._AccessorCompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessorCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorCompanyID = value;
					this.SendPropertyChanged("AccessorCompanyID");
					this.OnAccessorCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorProjectID
		{
			get
			{
				return this._AccessorProjectID;
			}
			set
			{
				if ((this._AccessorProjectID != value))
				{
					this.OnAccessorProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorProjectID = value;
					this.SendPropertyChanged("AccessorProjectID");
					this.OnAccessorProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorContactID
		{
			get
			{
				return this._AccessorContactID;
			}
			set
			{
				if ((this._AccessorContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessorContactIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorContactID = value;
					this.SendPropertyChanged("AccessorContactID");
					this.OnAccessorContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorRoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorRoleID
		{
			get
			{
				return this._AccessorRoleID;
			}
			set
			{
				if ((this._AccessorRoleID != value))
				{
					this.OnAccessorRoleIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorRoleID = value;
					this.SendPropertyChanged("AccessorRoleID");
					this.OnAccessorRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCreate", DbType="Bit")]
		public System.Nullable<bool> CanCreate
		{
			get
			{
				return this._CanCreate;
			}
			set
			{
				if ((this._CanCreate != value))
				{
					this.OnCanCreateChanging(value);
					this.SendPropertyChanging();
					this._CanCreate = value;
					this.SendPropertyChanged("CanCreate");
					this.OnCanCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanRead", DbType="Bit")]
		public System.Nullable<bool> CanRead
		{
			get
			{
				return this._CanRead;
			}
			set
			{
				if ((this._CanRead != value))
				{
					this.OnCanReadChanging(value);
					this.SendPropertyChanging();
					this._CanRead = value;
					this.SendPropertyChanged("CanRead");
					this.OnCanReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanUpdate", DbType="Bit")]
		public System.Nullable<bool> CanUpdate
		{
			get
			{
				return this._CanUpdate;
			}
			set
			{
				if ((this._CanUpdate != value))
				{
					this.OnCanUpdateChanging(value);
					this.SendPropertyChanging();
					this._CanUpdate = value;
					this.SendPropertyChanged("CanUpdate");
					this.OnCanUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit")]
		public System.Nullable<bool> CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityBlacklist", Storage="_X_Company", ThisKey="OwnerCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company X_Company
		{
			get
			{
				return this._X_Company.Entity;
			}
			set
			{
				Company previousValue = this._X_Company.Entity;
				if (((previousValue != value) 
							|| (this._X_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Company.Entity = null;
						previousValue.X_SecurityBlacklists.Remove(this);
					}
					this._X_Company.Entity = value;
					if ((value != null))
					{
						value.X_SecurityBlacklists.Add(this);
						this._OwnerCompanyID = value.CompanyID;
					}
					else
					{
						this._OwnerCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityBlacklist1", Storage="_Company", ThisKey="AccessorCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.SecurityBlacklists.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.SecurityBlacklists.Add(this);
						this._AccessorCompanyID = value.CompanyID;
					}
					else
					{
						this._AccessorCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityBlacklist", Storage="_Contact", ThisKey="AccessorContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.SecurityBlacklists.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.SecurityBlacklists.Add(this);
						this._AccessorContactID = value.ContactID;
					}
					else
					{
						this._AccessorContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_SecurityWhitelist")]
	public partial class SecurityWhitelist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SecurityWhitelistID;
		
		private System.Nullable<System.Guid> _OwnerApplicationID;
		
		private System.Nullable<System.Guid> _OwnerCompanyID;
		
		private System.Nullable<System.Guid> _OwnerContactID;
		
		private System.Nullable<System.Guid> _OwnerProjectID;
		
		private string _OwnerEntitySystemType;
		
		private string _OwnerTableType;
		
		private string _OwnerField;
		
		private System.Nullable<System.Guid> _OwnerReferenceID;
		
		private System.Nullable<System.Guid> _AccessorApplicationID;
		
		private System.Nullable<System.Guid> _AccessorCompanyID;
		
		private System.Nullable<System.Guid> _AccessorProjectID;
		
		private System.Nullable<System.Guid> _AccessorContactID;
		
		private System.Nullable<System.Guid> _AccessorRoleID;
		
		private System.Nullable<bool> _CanCreate;
		
		private System.Nullable<bool> _CanRead;
		
		private System.Nullable<bool> _CanUpdate;
		
		private System.Nullable<bool> _CanDelete;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<Company> _X_Company;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityWhitelistIDChanging(System.Guid value);
    partial void OnSecurityWhitelistIDChanged();
    partial void OnOwnerApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerApplicationIDChanged();
    partial void OnOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerCompanyIDChanged();
    partial void OnOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerContactIDChanged();
    partial void OnOwnerProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerProjectIDChanged();
    partial void OnOwnerEntitySystemTypeChanging(string value);
    partial void OnOwnerEntitySystemTypeChanged();
    partial void OnOwnerTableTypeChanging(string value);
    partial void OnOwnerTableTypeChanged();
    partial void OnOwnerFieldChanging(string value);
    partial void OnOwnerFieldChanged();
    partial void OnOwnerReferenceIDChanging(System.Nullable<System.Guid> value);
    partial void OnOwnerReferenceIDChanged();
    partial void OnAccessorApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorApplicationIDChanged();
    partial void OnAccessorCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorCompanyIDChanged();
    partial void OnAccessorProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorProjectIDChanged();
    partial void OnAccessorContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorContactIDChanged();
    partial void OnAccessorRoleIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessorRoleIDChanged();
    partial void OnCanCreateChanging(System.Nullable<bool> value);
    partial void OnCanCreateChanged();
    partial void OnCanReadChanging(System.Nullable<bool> value);
    partial void OnCanReadChanged();
    partial void OnCanUpdateChanging(System.Nullable<bool> value);
    partial void OnCanUpdateChanged();
    partial void OnCanDeleteChanging(System.Nullable<bool> value);
    partial void OnCanDeleteChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public SecurityWhitelist()
		{
			this._X_Company = default(EntityRef<Company>);
			this._Company = default(EntityRef<Company>);
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityWhitelistID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SecurityWhitelistID
		{
			get
			{
				return this._SecurityWhitelistID;
			}
			set
			{
				if ((this._SecurityWhitelistID != value))
				{
					this.OnSecurityWhitelistIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityWhitelistID = value;
					this.SendPropertyChanged("SecurityWhitelistID");
					this.OnSecurityWhitelistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerApplicationID
		{
			get
			{
				return this._OwnerApplicationID;
			}
			set
			{
				if ((this._OwnerApplicationID != value))
				{
					this.OnOwnerApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerApplicationID = value;
					this.SendPropertyChanged("OwnerApplicationID");
					this.OnOwnerApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerCompanyID
		{
			get
			{
				return this._OwnerCompanyID;
			}
			set
			{
				if ((this._OwnerCompanyID != value))
				{
					if (this._X_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerCompanyID = value;
					this.SendPropertyChanged("OwnerCompanyID");
					this.OnOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerContactID
		{
			get
			{
				return this._OwnerContactID;
			}
			set
			{
				if ((this._OwnerContactID != value))
				{
					this.OnOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerContactID = value;
					this.SendPropertyChanged("OwnerContactID");
					this.OnOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerProjectID
		{
			get
			{
				return this._OwnerProjectID;
			}
			set
			{
				if ((this._OwnerProjectID != value))
				{
					this.OnOwnerProjectIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerProjectID = value;
					this.SendPropertyChanged("OwnerProjectID");
					this.OnOwnerProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerEntitySystemType", DbType="NVarChar(255)")]
		public string OwnerEntitySystemType
		{
			get
			{
				return this._OwnerEntitySystemType;
			}
			set
			{
				if ((this._OwnerEntitySystemType != value))
				{
					this.OnOwnerEntitySystemTypeChanging(value);
					this.SendPropertyChanging();
					this._OwnerEntitySystemType = value;
					this.SendPropertyChanged("OwnerEntitySystemType");
					this.OnOwnerEntitySystemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerTableType", DbType="NVarChar(50)")]
		public string OwnerTableType
		{
			get
			{
				return this._OwnerTableType;
			}
			set
			{
				if ((this._OwnerTableType != value))
				{
					this.OnOwnerTableTypeChanging(value);
					this.SendPropertyChanging();
					this._OwnerTableType = value;
					this.SendPropertyChanged("OwnerTableType");
					this.OnOwnerTableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerField", DbType="NVarChar(50)")]
		public string OwnerField
		{
			get
			{
				return this._OwnerField;
			}
			set
			{
				if ((this._OwnerField != value))
				{
					this.OnOwnerFieldChanging(value);
					this.SendPropertyChanging();
					this._OwnerField = value;
					this.SendPropertyChanged("OwnerField");
					this.OnOwnerFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerReferenceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OwnerReferenceID
		{
			get
			{
				return this._OwnerReferenceID;
			}
			set
			{
				if ((this._OwnerReferenceID != value))
				{
					this.OnOwnerReferenceIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerReferenceID = value;
					this.SendPropertyChanged("OwnerReferenceID");
					this.OnOwnerReferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorApplicationID
		{
			get
			{
				return this._AccessorApplicationID;
			}
			set
			{
				if ((this._AccessorApplicationID != value))
				{
					this.OnAccessorApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorApplicationID = value;
					this.SendPropertyChanged("AccessorApplicationID");
					this.OnAccessorApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorCompanyID
		{
			get
			{
				return this._AccessorCompanyID;
			}
			set
			{
				if ((this._AccessorCompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessorCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorCompanyID = value;
					this.SendPropertyChanged("AccessorCompanyID");
					this.OnAccessorCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorProjectID
		{
			get
			{
				return this._AccessorProjectID;
			}
			set
			{
				if ((this._AccessorProjectID != value))
				{
					this.OnAccessorProjectIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorProjectID = value;
					this.SendPropertyChanged("AccessorProjectID");
					this.OnAccessorProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorContactID
		{
			get
			{
				return this._AccessorContactID;
			}
			set
			{
				if ((this._AccessorContactID != value))
				{
					if ((this._Contact.HasLoadedOrAssignedValue || this._Contact1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessorContactIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorContactID = value;
					this.SendPropertyChanged("AccessorContactID");
					this.OnAccessorContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessorRoleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessorRoleID
		{
			get
			{
				return this._AccessorRoleID;
			}
			set
			{
				if ((this._AccessorRoleID != value))
				{
					this.OnAccessorRoleIDChanging(value);
					this.SendPropertyChanging();
					this._AccessorRoleID = value;
					this.SendPropertyChanged("AccessorRoleID");
					this.OnAccessorRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCreate", DbType="Bit")]
		public System.Nullable<bool> CanCreate
		{
			get
			{
				return this._CanCreate;
			}
			set
			{
				if ((this._CanCreate != value))
				{
					this.OnCanCreateChanging(value);
					this.SendPropertyChanging();
					this._CanCreate = value;
					this.SendPropertyChanged("CanCreate");
					this.OnCanCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanRead", DbType="Bit")]
		public System.Nullable<bool> CanRead
		{
			get
			{
				return this._CanRead;
			}
			set
			{
				if ((this._CanRead != value))
				{
					this.OnCanReadChanging(value);
					this.SendPropertyChanging();
					this._CanRead = value;
					this.SendPropertyChanged("CanRead");
					this.OnCanReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanUpdate", DbType="Bit")]
		public System.Nullable<bool> CanUpdate
		{
			get
			{
				return this._CanUpdate;
			}
			set
			{
				if ((this._CanUpdate != value))
				{
					this.OnCanUpdateChanging(value);
					this.SendPropertyChanging();
					this._CanUpdate = value;
					this.SendPropertyChanged("CanUpdate");
					this.OnCanUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit")]
		public System.Nullable<bool> CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityWhitelist", Storage="_X_Company", ThisKey="OwnerCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company X_Company
		{
			get
			{
				return this._X_Company.Entity;
			}
			set
			{
				Company previousValue = this._X_Company.Entity;
				if (((previousValue != value) 
							|| (this._X_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Company.Entity = null;
						previousValue.X_SecurityWhitelists.Remove(this);
					}
					this._X_Company.Entity = value;
					if ((value != null))
					{
						value.X_SecurityWhitelists.Add(this);
						this._OwnerCompanyID = value.CompanyID;
					}
					else
					{
						this._OwnerCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_SecurityWhitelist1", Storage="_Company", ThisKey="AccessorCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.SecurityWhitelists.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.SecurityWhitelists.Add(this);
						this._AccessorCompanyID = value.CompanyID;
					}
					else
					{
						this._AccessorCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityWhitelist", Storage="_Contact", ThisKey="AccessorContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.X_SecurityWhitelists.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.X_SecurityWhitelists.Add(this);
						this._AccessorContactID = value.ContactID;
					}
					else
					{
						this._AccessorContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_SecurityWhitelist1", Storage="_Contact1", ThisKey="AccessorContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.SecurityWhitelists.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.SecurityWhitelists.Add(this);
						this._AccessorContactID = value.ContactID;
					}
					else
					{
						this._AccessorContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Experience")]
	public partial class Experience : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ExperienceID;
		
		private string _ExperienceName;
		
		private System.Nullable<System.Guid> _CompanyID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private System.Nullable<System.Guid> _ContactID;
		
		private System.Nullable<System.Guid> _LocationID;
		
		private System.Nullable<System.Guid> _ProvinceID;
		
		private System.Nullable<System.Guid> _WorkTypeID;
		
		private System.Nullable<System.Guid> _ProfessionID;
		
		private System.Nullable<System.Guid> _PositionID;
		
		private string _ClientAlias;
		
		private string _Division;
		
		private string _OfficeLocationAlias;
		
		private string _ExternalProjectCode;
		
		private System.Nullable<int> _EstimatedDurationDays;
		
		private System.Nullable<int> _UserExperienceLevel;
		
		private System.Nullable<int> _AssignedExperienceLevel;
		
		private System.Nullable<int> _NormalizedExperienceLevel;
		
		private System.DateTime _DateStart;
		
		private System.Nullable<System.DateTime> _DateFinished;
		
		private System.Nullable<System.DateTime> _Expiry;
		
		private System.Nullable<decimal> _HourlyRate;
		
		private System.Nullable<decimal> _DailyRate;
		
		private System.Nullable<decimal> _AnnualRate;
		
		private System.Nullable<decimal> _BlendedHourlyRate;
		
		private System.Nullable<decimal> _BlendedHourlyCost;
		
		private string _Comment;
		
		private System.Nullable<bool> _IsApproved;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExperienceIDChanging(System.Guid value);
    partial void OnExperienceIDChanged();
    partial void OnExperienceNameChanging(string value);
    partial void OnExperienceNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnContactIDChanged();
    partial void OnLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnLocationIDChanged();
    partial void OnProvinceIDChanging(System.Nullable<System.Guid> value);
    partial void OnProvinceIDChanged();
    partial void OnWorkTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnWorkTypeIDChanged();
    partial void OnProfessionIDChanging(System.Nullable<System.Guid> value);
    partial void OnProfessionIDChanged();
    partial void OnPositionIDChanging(System.Nullable<System.Guid> value);
    partial void OnPositionIDChanged();
    partial void OnClientAliasChanging(string value);
    partial void OnClientAliasChanged();
    partial void OnDivisionChanging(string value);
    partial void OnDivisionChanged();
    partial void OnOfficeLocationAliasChanging(string value);
    partial void OnOfficeLocationAliasChanged();
    partial void OnExternalProjectCodeChanging(string value);
    partial void OnExternalProjectCodeChanged();
    partial void OnEstimatedDurationDaysChanging(System.Nullable<int> value);
    partial void OnEstimatedDurationDaysChanged();
    partial void OnUserExperienceLevelChanging(System.Nullable<int> value);
    partial void OnUserExperienceLevelChanged();
    partial void OnAssignedExperienceLevelChanging(System.Nullable<int> value);
    partial void OnAssignedExperienceLevelChanged();
    partial void OnNormalizedExperienceLevelChanging(System.Nullable<int> value);
    partial void OnNormalizedExperienceLevelChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinishedChanged();
    partial void OnExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryChanged();
    partial void OnHourlyRateChanging(System.Nullable<decimal> value);
    partial void OnHourlyRateChanged();
    partial void OnDailyRateChanging(System.Nullable<decimal> value);
    partial void OnDailyRateChanged();
    partial void OnAnnualRateChanging(System.Nullable<decimal> value);
    partial void OnAnnualRateChanged();
    partial void OnBlendedHourlyRateChanging(System.Nullable<decimal> value);
    partial void OnBlendedHourlyRateChanged();
    partial void OnBlendedHourlyCostChanging(System.Nullable<decimal> value);
    partial void OnBlendedHourlyCostChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public Experience()
		{
			this._Company = default(EntityRef<Company>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperienceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ExperienceID
		{
			get
			{
				return this._ExperienceID;
			}
			set
			{
				if ((this._ExperienceID != value))
				{
					this.OnExperienceIDChanging(value);
					this.SendPropertyChanging();
					this._ExperienceID = value;
					this.SendPropertyChanged("ExperienceID");
					this.OnExperienceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperienceName", DbType="NVarChar(120)")]
		public string ExperienceName
		{
			get
			{
				return this._ExperienceName;
			}
			set
			{
				if ((this._ExperienceName != value))
				{
					this.OnExperienceNameChanging(value);
					this.SendPropertyChanging();
					this._ExperienceName = value;
					this.SendPropertyChanged("ExperienceName");
					this.OnExperienceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> WorkTypeID
		{
			get
			{
				return this._WorkTypeID;
			}
			set
			{
				if ((this._WorkTypeID != value))
				{
					this.OnWorkTypeIDChanging(value);
					this.SendPropertyChanging();
					this._WorkTypeID = value;
					this.SendPropertyChanged("WorkTypeID");
					this.OnWorkTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfessionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProfessionID
		{
			get
			{
				return this._ProfessionID;
			}
			set
			{
				if ((this._ProfessionID != value))
				{
					this.OnProfessionIDChanging(value);
					this.SendPropertyChanging();
					this._ProfessionID = value;
					this.SendPropertyChanged("ProfessionID");
					this.OnProfessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientAlias", DbType="NVarChar(50)")]
		public string ClientAlias
		{
			get
			{
				return this._ClientAlias;
			}
			set
			{
				if ((this._ClientAlias != value))
				{
					this.OnClientAliasChanging(value);
					this.SendPropertyChanging();
					this._ClientAlias = value;
					this.SendPropertyChanged("ClientAlias");
					this.OnClientAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="NVarChar(50)")]
		public string Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					this.OnDivisionChanging(value);
					this.SendPropertyChanging();
					this._Division = value;
					this.SendPropertyChanged("Division");
					this.OnDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeLocationAlias", DbType="NVarChar(50)")]
		public string OfficeLocationAlias
		{
			get
			{
				return this._OfficeLocationAlias;
			}
			set
			{
				if ((this._OfficeLocationAlias != value))
				{
					this.OnOfficeLocationAliasChanging(value);
					this.SendPropertyChanging();
					this._OfficeLocationAlias = value;
					this.SendPropertyChanged("OfficeLocationAlias");
					this.OnOfficeLocationAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalProjectCode", DbType="NVarChar(50)")]
		public string ExternalProjectCode
		{
			get
			{
				return this._ExternalProjectCode;
			}
			set
			{
				if ((this._ExternalProjectCode != value))
				{
					this.OnExternalProjectCodeChanging(value);
					this.SendPropertyChanging();
					this._ExternalProjectCode = value;
					this.SendPropertyChanged("ExternalProjectCode");
					this.OnExternalProjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedDurationDays", DbType="Int")]
		public System.Nullable<int> EstimatedDurationDays
		{
			get
			{
				return this._EstimatedDurationDays;
			}
			set
			{
				if ((this._EstimatedDurationDays != value))
				{
					this.OnEstimatedDurationDaysChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDurationDays = value;
					this.SendPropertyChanged("EstimatedDurationDays");
					this.OnEstimatedDurationDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserExperienceLevel", DbType="Int")]
		public System.Nullable<int> UserExperienceLevel
		{
			get
			{
				return this._UserExperienceLevel;
			}
			set
			{
				if ((this._UserExperienceLevel != value))
				{
					this.OnUserExperienceLevelChanging(value);
					this.SendPropertyChanging();
					this._UserExperienceLevel = value;
					this.SendPropertyChanged("UserExperienceLevel");
					this.OnUserExperienceLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedExperienceLevel", DbType="Int")]
		public System.Nullable<int> AssignedExperienceLevel
		{
			get
			{
				return this._AssignedExperienceLevel;
			}
			set
			{
				if ((this._AssignedExperienceLevel != value))
				{
					this.OnAssignedExperienceLevelChanging(value);
					this.SendPropertyChanging();
					this._AssignedExperienceLevel = value;
					this.SendPropertyChanged("AssignedExperienceLevel");
					this.OnAssignedExperienceLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormalizedExperienceLevel", DbType="Int")]
		public System.Nullable<int> NormalizedExperienceLevel
		{
			get
			{
				return this._NormalizedExperienceLevel;
			}
			set
			{
				if ((this._NormalizedExperienceLevel != value))
				{
					this.OnNormalizedExperienceLevelChanging(value);
					this.SendPropertyChanging();
					this._NormalizedExperienceLevel = value;
					this.SendPropertyChanged("NormalizedExperienceLevel");
					this.OnNormalizedExperienceLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="Date NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFinished", DbType="Date")]
		public System.Nullable<System.DateTime> DateFinished
		{
			get
			{
				return this._DateFinished;
			}
			set
			{
				if ((this._DateFinished != value))
				{
					this.OnDateFinishedChanging(value);
					this.SendPropertyChanging();
					this._DateFinished = value;
					this.SendPropertyChanged("DateFinished");
					this.OnDateFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry", DbType="Date")]
		public System.Nullable<System.DateTime> Expiry
		{
			get
			{
				return this._Expiry;
			}
			set
			{
				if ((this._Expiry != value))
				{
					this.OnExpiryChanging(value);
					this.SendPropertyChanging();
					this._Expiry = value;
					this.SendPropertyChanged("Expiry");
					this.OnExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyRate", DbType="Money")]
		public System.Nullable<decimal> HourlyRate
		{
			get
			{
				return this._HourlyRate;
			}
			set
			{
				if ((this._HourlyRate != value))
				{
					this.OnHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._HourlyRate = value;
					this.SendPropertyChanged("HourlyRate");
					this.OnHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyRate", DbType="Money")]
		public System.Nullable<decimal> DailyRate
		{
			get
			{
				return this._DailyRate;
			}
			set
			{
				if ((this._DailyRate != value))
				{
					this.OnDailyRateChanging(value);
					this.SendPropertyChanging();
					this._DailyRate = value;
					this.SendPropertyChanged("DailyRate");
					this.OnDailyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnualRate", DbType="Money")]
		public System.Nullable<decimal> AnnualRate
		{
			get
			{
				return this._AnnualRate;
			}
			set
			{
				if ((this._AnnualRate != value))
				{
					this.OnAnnualRateChanging(value);
					this.SendPropertyChanging();
					this._AnnualRate = value;
					this.SendPropertyChanged("AnnualRate");
					this.OnAnnualRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlendedHourlyRate", DbType="Money")]
		public System.Nullable<decimal> BlendedHourlyRate
		{
			get
			{
				return this._BlendedHourlyRate;
			}
			set
			{
				if ((this._BlendedHourlyRate != value))
				{
					this.OnBlendedHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._BlendedHourlyRate = value;
					this.SendPropertyChanged("BlendedHourlyRate");
					this.OnBlendedHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlendedHourlyCost", DbType="Money")]
		public System.Nullable<decimal> BlendedHourlyCost
		{
			get
			{
				return this._BlendedHourlyCost;
			}
			set
			{
				if ((this._BlendedHourlyCost != value))
				{
					this.OnBlendedHourlyCostChanging(value);
					this.SendPropertyChanging();
					this._BlendedHourlyCost = value;
					this.SendPropertyChanged("BlendedHourlyCost");
					this.OnBlendedHourlyCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(255)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_X_Experience", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Experiences.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Experiences.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_X_Experience", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Experiences.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Experiences.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
