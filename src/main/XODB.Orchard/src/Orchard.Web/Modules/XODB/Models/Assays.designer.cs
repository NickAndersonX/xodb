#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XODB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XODB")]
	public partial class AssaysDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertX_AssayGroup(X_AssayGroup instance);
    partial void UpdateX_AssayGroup(X_AssayGroup instance);
    partial void DeleteX_AssayGroup(X_AssayGroup instance);
    partial void InsertX_AssayGroupTestResultDuplicate(X_AssayGroupTestResultDuplicate instance);
    partial void UpdateX_AssayGroupTestResultDuplicate(X_AssayGroupTestResultDuplicate instance);
    partial void DeleteX_AssayGroupTestResultDuplicate(X_AssayGroupTestResultDuplicate instance);
    partial void InsertX_AssayGroupStandardTestResult(X_AssayGroupStandardTestResult instance);
    partial void UpdateX_AssayGroupStandardTestResult(X_AssayGroupStandardTestResult instance);
    partial void DeleteX_AssayGroupStandardTestResult(X_AssayGroupStandardTestResult instance);
    partial void InsertX_AssayGroupTest(X_AssayGroupTest instance);
    partial void UpdateX_AssayGroupTest(X_AssayGroupTest instance);
    partial void DeleteX_AssayGroupTest(X_AssayGroupTest instance);
    partial void InsertX_AssayGroupTestResult(X_AssayGroupTestResult instance);
    partial void UpdateX_AssayGroupTestResult(X_AssayGroupTestResult instance);
    partial void DeleteX_AssayGroupTestResult(X_AssayGroupTestResult instance);
    partial void InsertX_AssayGroupTestResultComment(X_AssayGroupTestResultComment instance);
    partial void UpdateX_AssayGroupTestResultComment(X_AssayGroupTestResultComment instance);
    partial void DeleteX_AssayGroupTestResultComment(X_AssayGroupTestResultComment instance);
    partial void InsertX_Sample(X_Sample instance);
    partial void UpdateX_Sample(X_Sample instance);
    partial void DeleteX_Sample(X_Sample instance);
    #endregion
		
		public AssaysDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssaysDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssaysDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssaysDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssaysDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<X_AssayGroup> X_AssayGroups
		{
			get
			{
				return this.GetTable<X_AssayGroup>();
			}
		}
		
		public System.Data.Linq.Table<X_AssayGroupTestResultDuplicate> X_AssayGroupTestResultDuplicates
		{
			get
			{
				return this.GetTable<X_AssayGroupTestResultDuplicate>();
			}
		}
		
		public System.Data.Linq.Table<X_AssayGroupStandardTestResult> X_AssayGroupStandardTestResults
		{
			get
			{
				return this.GetTable<X_AssayGroupStandardTestResult>();
			}
		}
		
		public System.Data.Linq.Table<X_AssayGroupTest> X_AssayGroupTests
		{
			get
			{
				return this.GetTable<X_AssayGroupTest>();
			}
		}
		
		public System.Data.Linq.Table<X_AssayGroupTestResult> X_AssayGroupTestResults
		{
			get
			{
				return this.GetTable<X_AssayGroupTestResult>();
			}
		}
		
		public System.Data.Linq.Table<X_AssayGroupTestResultComment> X_AssayGroupTestResultComments
		{
			get
			{
				return this.GetTable<X_AssayGroupTestResultComment>();
			}
		}
		
		public System.Data.Linq.Table<X_Sample> X_Samples
		{
			get
			{
				return this.GetTable<X_Sample>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroup")]
	public partial class X_AssayGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _AssayGroupName;
		
		private System.Nullable<System.Guid> _LabCompanyID;
		
		private System.Nullable<System.DateTime> _Submitted;
		
		private System.Nullable<System.Guid> _SubmittedContactID;
		
		private System.Nullable<System.DateTime> _Received;
		
		private System.Nullable<System.Guid> _ReceivedContactID;
		
		private System.Nullable<System.DateTime> _Entered;
		
		private System.Nullable<System.Guid> _EnteredContactID;
		
		private string _Comment;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_AssayGroupTest> _X_AssayGroupTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupIDChanging(System.Guid value);
    partial void OnAssayGroupIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnAssayGroupNameChanging(string value);
    partial void OnAssayGroupNameChanged();
    partial void OnLabCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnLabCompanyIDChanged();
    partial void OnSubmittedChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmittedChanged();
    partial void OnSubmittedContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnSubmittedContactIDChanged();
    partial void OnReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedChanged();
    partial void OnReceivedContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnReceivedContactIDChanged();
    partial void OnEnteredChanging(System.Nullable<System.DateTime> value);
    partial void OnEnteredChanged();
    partial void OnEnteredContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnEnteredContactIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroup()
		{
			this._X_AssayGroupTests = new EntitySet<X_AssayGroupTest>(new Action<X_AssayGroupTest>(this.attach_X_AssayGroupTests), new Action<X_AssayGroupTest>(this.detach_X_AssayGroupTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupID
		{
			get
			{
				return this._AssayGroupID;
			}
			set
			{
				if ((this._AssayGroupID != value))
				{
					this.OnAssayGroupIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupID = value;
					this.SendPropertyChanged("AssayGroupID");
					this.OnAssayGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupName", DbType="NVarChar(50)")]
		public string AssayGroupName
		{
			get
			{
				return this._AssayGroupName;
			}
			set
			{
				if ((this._AssayGroupName != value))
				{
					this.OnAssayGroupNameChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupName = value;
					this.SendPropertyChanged("AssayGroupName");
					this.OnAssayGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LabCompanyID
		{
			get
			{
				return this._LabCompanyID;
			}
			set
			{
				if ((this._LabCompanyID != value))
				{
					this.OnLabCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._LabCompanyID = value;
					this.SendPropertyChanged("LabCompanyID");
					this.OnLabCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submitted", DbType="Date")]
		public System.Nullable<System.DateTime> Submitted
		{
			get
			{
				return this._Submitted;
			}
			set
			{
				if ((this._Submitted != value))
				{
					this.OnSubmittedChanging(value);
					this.SendPropertyChanging();
					this._Submitted = value;
					this.SendPropertyChanged("Submitted");
					this.OnSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SubmittedContactID
		{
			get
			{
				return this._SubmittedContactID;
			}
			set
			{
				if ((this._SubmittedContactID != value))
				{
					this.OnSubmittedContactIDChanging(value);
					this.SendPropertyChanging();
					this._SubmittedContactID = value;
					this.SendPropertyChanged("SubmittedContactID");
					this.OnSubmittedContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Received", DbType="Date")]
		public System.Nullable<System.DateTime> Received
		{
			get
			{
				return this._Received;
			}
			set
			{
				if ((this._Received != value))
				{
					this.OnReceivedChanging(value);
					this.SendPropertyChanging();
					this._Received = value;
					this.SendPropertyChanged("Received");
					this.OnReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReceivedContactID
		{
			get
			{
				return this._ReceivedContactID;
			}
			set
			{
				if ((this._ReceivedContactID != value))
				{
					this.OnReceivedContactIDChanging(value);
					this.SendPropertyChanging();
					this._ReceivedContactID = value;
					this.SendPropertyChanged("ReceivedContactID");
					this.OnReceivedContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entered", DbType="Date")]
		public System.Nullable<System.DateTime> Entered
		{
			get
			{
				return this._Entered;
			}
			set
			{
				if ((this._Entered != value))
				{
					this.OnEnteredChanging(value);
					this.SendPropertyChanging();
					this._Entered = value;
					this.SendPropertyChanged("Entered");
					this.OnEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EnteredContactID
		{
			get
			{
				return this._EnteredContactID;
			}
			set
			{
				if ((this._EnteredContactID != value))
				{
					this.OnEnteredContactIDChanging(value);
					this.SendPropertyChanging();
					this._EnteredContactID = value;
					this.SendPropertyChanged("EnteredContactID");
					this.OnEnteredContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroup_X_AssayGroupTest", Storage="_X_AssayGroupTests", ThisKey="AssayGroupID", OtherKey="AssayGroupID")]
		public EntitySet<X_AssayGroupTest> X_AssayGroupTests
		{
			get
			{
				return this._X_AssayGroupTests;
			}
			set
			{
				this._X_AssayGroupTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_AssayGroupTests(X_AssayGroupTest entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroup = this;
		}
		
		private void detach_X_AssayGroupTests(X_AssayGroupTest entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroupTestResultDuplicate")]
	public partial class X_AssayGroupTestResultDuplicate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupTestResultDuplicateID;
		
		private System.Guid _AssayGroupTestResultID;
		
		private string _LabResultText;
		
		private System.Nullable<decimal> _LabResult;
		
		private string _LabSampleNumber;
		
		private string _LabBatchNumber;
		
		private System.Nullable<System.DateTime> _Sampled;
		
		private string _SampledBy;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<X_AssayGroupTestResult> _X_AssayGroupTestResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupTestResultDuplicateIDChanging(System.Guid value);
    partial void OnAssayGroupTestResultDuplicateIDChanged();
    partial void OnAssayGroupTestResultIDChanging(System.Guid value);
    partial void OnAssayGroupTestResultIDChanged();
    partial void OnLabResultTextChanging(string value);
    partial void OnLabResultTextChanged();
    partial void OnLabResultChanging(System.Nullable<decimal> value);
    partial void OnLabResultChanged();
    partial void OnLabSampleNumberChanging(string value);
    partial void OnLabSampleNumberChanged();
    partial void OnLabBatchNumberChanging(string value);
    partial void OnLabBatchNumberChanged();
    partial void OnSampledChanging(System.Nullable<System.DateTime> value);
    partial void OnSampledChanged();
    partial void OnSampledByChanging(string value);
    partial void OnSampledByChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroupTestResultDuplicate()
		{
			this._X_AssayGroupTestResult = default(EntityRef<X_AssayGroupTestResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestResultDuplicateID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupTestResultDuplicateID
		{
			get
			{
				return this._AssayGroupTestResultDuplicateID;
			}
			set
			{
				if ((this._AssayGroupTestResultDuplicateID != value))
				{
					this.OnAssayGroupTestResultDuplicateIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestResultDuplicateID = value;
					this.SendPropertyChanged("AssayGroupTestResultDuplicateID");
					this.OnAssayGroupTestResultDuplicateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestResultID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssayGroupTestResultID
		{
			get
			{
				return this._AssayGroupTestResultID;
			}
			set
			{
				if ((this._AssayGroupTestResultID != value))
				{
					if (this._X_AssayGroupTestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestResultID = value;
					this.SendPropertyChanged("AssayGroupTestResultID");
					this.OnAssayGroupTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResultText", DbType="NVarChar(58)")]
		public string LabResultText
		{
			get
			{
				return this._LabResultText;
			}
			set
			{
				if ((this._LabResultText != value))
				{
					this.OnLabResultTextChanging(value);
					this.SendPropertyChanging();
					this._LabResultText = value;
					this.SendPropertyChanged("LabResultText");
					this.OnLabResultTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResult", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> LabResult
		{
			get
			{
				return this._LabResult;
			}
			set
			{
				if ((this._LabResult != value))
				{
					this.OnLabResultChanging(value);
					this.SendPropertyChanging();
					this._LabResult = value;
					this.SendPropertyChanged("LabResult");
					this.OnLabResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabSampleNumber", DbType="NVarChar(16)")]
		public string LabSampleNumber
		{
			get
			{
				return this._LabSampleNumber;
			}
			set
			{
				if ((this._LabSampleNumber != value))
				{
					this.OnLabSampleNumberChanging(value);
					this.SendPropertyChanging();
					this._LabSampleNumber = value;
					this.SendPropertyChanged("LabSampleNumber");
					this.OnLabSampleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabBatchNumber", DbType="NVarChar(16)")]
		public string LabBatchNumber
		{
			get
			{
				return this._LabBatchNumber;
			}
			set
			{
				if ((this._LabBatchNumber != value))
				{
					this.OnLabBatchNumberChanging(value);
					this.SendPropertyChanging();
					this._LabBatchNumber = value;
					this.SendPropertyChanged("LabBatchNumber");
					this.OnLabBatchNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sampled", DbType="Date")]
		public System.Nullable<System.DateTime> Sampled
		{
			get
			{
				return this._Sampled;
			}
			set
			{
				if ((this._Sampled != value))
				{
					this.OnSampledChanging(value);
					this.SendPropertyChanging();
					this._Sampled = value;
					this.SendPropertyChanged("Sampled");
					this.OnSampledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampledBy", DbType="NVarChar(50)")]
		public string SampledBy
		{
			get
			{
				return this._SampledBy;
			}
			set
			{
				if ((this._SampledBy != value))
				{
					this.OnSampledByChanging(value);
					this.SendPropertyChanging();
					this._SampledBy = value;
					this.SendPropertyChanged("SampledBy");
					this.OnSampledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTestResult_X_AssayGroupTestResultDuplicate", Storage="_X_AssayGroupTestResult", ThisKey="AssayGroupTestResultID", OtherKey="AssayGroupTestResultID", IsForeignKey=true)]
		public X_AssayGroupTestResult X_AssayGroupTestResult
		{
			get
			{
				return this._X_AssayGroupTestResult.Entity;
			}
			set
			{
				X_AssayGroupTestResult previousValue = this._X_AssayGroupTestResult.Entity;
				if (((previousValue != value) 
							|| (this._X_AssayGroupTestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_AssayGroupTestResult.Entity = null;
						previousValue.X_AssayGroupTestResultDuplicates.Remove(this);
					}
					this._X_AssayGroupTestResult.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupTestResultDuplicates.Add(this);
						this._AssayGroupTestResultID = value.AssayGroupTestResultID;
					}
					else
					{
						this._AssayGroupTestResultID = default(System.Guid);
					}
					this.SendPropertyChanged("X_AssayGroupTestResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroupStandardTestResult")]
	public partial class X_AssayGroupStandardTestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupStandardTestResultID;
		
		private System.Nullable<System.Guid> _AssayGroupTestSampleID;
		
		private System.Nullable<System.Guid> _AssayGroupTestID;
		
		private System.Nullable<System.Guid> _AssayStandardID;
		
		private System.Nullable<System.Guid> _SampleCategoryID;
		
		private System.Nullable<System.Guid> _SampleStateID;
		
		private System.Nullable<System.Guid> _SampleTypeID;
		
		private string _LabResultText;
		
		private System.Nullable<decimal> _LabResult;
		
		private string _LabSampleNumber;
		
		private string _LabBatchNumber;
		
		private System.Nullable<System.DateTime> _Sampled;
		
		private string _SampledBy;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<X_AssayGroupTest> _X_AssayGroupTest;
		
		private EntityRef<X_Sample> _X_Sample;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupStandardTestResultIDChanging(System.Guid value);
    partial void OnAssayGroupStandardTestResultIDChanged();
    partial void OnAssayGroupTestSampleIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayGroupTestSampleIDChanged();
    partial void OnAssayGroupTestIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayGroupTestIDChanged();
    partial void OnAssayStandardIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayStandardIDChanged();
    partial void OnSampleCategoryIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleCategoryIDChanged();
    partial void OnSampleStateIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleStateIDChanged();
    partial void OnSampleTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleTypeIDChanged();
    partial void OnLabResultTextChanging(string value);
    partial void OnLabResultTextChanged();
    partial void OnLabResultChanging(System.Nullable<decimal> value);
    partial void OnLabResultChanged();
    partial void OnLabSampleNumberChanging(string value);
    partial void OnLabSampleNumberChanged();
    partial void OnLabBatchNumberChanging(string value);
    partial void OnLabBatchNumberChanged();
    partial void OnSampledChanging(System.Nullable<System.DateTime> value);
    partial void OnSampledChanged();
    partial void OnSampledByChanging(string value);
    partial void OnSampledByChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroupStandardTestResult()
		{
			this._X_AssayGroupTest = default(EntityRef<X_AssayGroupTest>);
			this._X_Sample = default(EntityRef<X_Sample>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupStandardTestResultID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupStandardTestResultID
		{
			get
			{
				return this._AssayGroupStandardTestResultID;
			}
			set
			{
				if ((this._AssayGroupStandardTestResultID != value))
				{
					this.OnAssayGroupStandardTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupStandardTestResultID = value;
					this.SendPropertyChanged("AssayGroupStandardTestResultID");
					this.OnAssayGroupStandardTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestSampleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayGroupTestSampleID
		{
			get
			{
				return this._AssayGroupTestSampleID;
			}
			set
			{
				if ((this._AssayGroupTestSampleID != value))
				{
					if (this._X_Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupTestSampleIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestSampleID = value;
					this.SendPropertyChanged("AssayGroupTestSampleID");
					this.OnAssayGroupTestSampleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayGroupTestID
		{
			get
			{
				return this._AssayGroupTestID;
			}
			set
			{
				if ((this._AssayGroupTestID != value))
				{
					if (this._X_AssayGroupTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupTestIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestID = value;
					this.SendPropertyChanged("AssayGroupTestID");
					this.OnAssayGroupTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayStandardID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayStandardID
		{
			get
			{
				return this._AssayStandardID;
			}
			set
			{
				if ((this._AssayStandardID != value))
				{
					this.OnAssayStandardIDChanging(value);
					this.SendPropertyChanging();
					this._AssayStandardID = value;
					this.SendPropertyChanged("AssayStandardID");
					this.OnAssayStandardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleCategoryID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleCategoryID
		{
			get
			{
				return this._SampleCategoryID;
			}
			set
			{
				if ((this._SampleCategoryID != value))
				{
					this.OnSampleCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SampleCategoryID = value;
					this.SendPropertyChanged("SampleCategoryID");
					this.OnSampleCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleStateID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleStateID
		{
			get
			{
				return this._SampleStateID;
			}
			set
			{
				if ((this._SampleStateID != value))
				{
					this.OnSampleStateIDChanging(value);
					this.SendPropertyChanging();
					this._SampleStateID = value;
					this.SendPropertyChanged("SampleStateID");
					this.OnSampleStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleTypeID
		{
			get
			{
				return this._SampleTypeID;
			}
			set
			{
				if ((this._SampleTypeID != value))
				{
					this.OnSampleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SampleTypeID = value;
					this.SendPropertyChanged("SampleTypeID");
					this.OnSampleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResultText", DbType="NVarChar(58)")]
		public string LabResultText
		{
			get
			{
				return this._LabResultText;
			}
			set
			{
				if ((this._LabResultText != value))
				{
					this.OnLabResultTextChanging(value);
					this.SendPropertyChanging();
					this._LabResultText = value;
					this.SendPropertyChanged("LabResultText");
					this.OnLabResultTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResult", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> LabResult
		{
			get
			{
				return this._LabResult;
			}
			set
			{
				if ((this._LabResult != value))
				{
					this.OnLabResultChanging(value);
					this.SendPropertyChanging();
					this._LabResult = value;
					this.SendPropertyChanged("LabResult");
					this.OnLabResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabSampleNumber", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string LabSampleNumber
		{
			get
			{
				return this._LabSampleNumber;
			}
			set
			{
				if ((this._LabSampleNumber != value))
				{
					this.OnLabSampleNumberChanging(value);
					this.SendPropertyChanging();
					this._LabSampleNumber = value;
					this.SendPropertyChanged("LabSampleNumber");
					this.OnLabSampleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabBatchNumber", DbType="NVarChar(16)")]
		public string LabBatchNumber
		{
			get
			{
				return this._LabBatchNumber;
			}
			set
			{
				if ((this._LabBatchNumber != value))
				{
					this.OnLabBatchNumberChanging(value);
					this.SendPropertyChanging();
					this._LabBatchNumber = value;
					this.SendPropertyChanged("LabBatchNumber");
					this.OnLabBatchNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sampled", DbType="Date")]
		public System.Nullable<System.DateTime> Sampled
		{
			get
			{
				return this._Sampled;
			}
			set
			{
				if ((this._Sampled != value))
				{
					this.OnSampledChanging(value);
					this.SendPropertyChanging();
					this._Sampled = value;
					this.SendPropertyChanged("Sampled");
					this.OnSampledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampledBy", DbType="NVarChar(50)")]
		public string SampledBy
		{
			get
			{
				return this._SampledBy;
			}
			set
			{
				if ((this._SampledBy != value))
				{
					this.OnSampledByChanging(value);
					this.SendPropertyChanging();
					this._SampledBy = value;
					this.SendPropertyChanged("SampledBy");
					this.OnSampledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTest_X_AssayGroupStandardTestResult", Storage="_X_AssayGroupTest", ThisKey="AssayGroupTestID", OtherKey="AssayGroupTestID", IsForeignKey=true)]
		public X_AssayGroupTest X_AssayGroupTest
		{
			get
			{
				return this._X_AssayGroupTest.Entity;
			}
			set
			{
				X_AssayGroupTest previousValue = this._X_AssayGroupTest.Entity;
				if (((previousValue != value) 
							|| (this._X_AssayGroupTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_AssayGroupTest.Entity = null;
						previousValue.X_AssayGroupStandardTestResults.Remove(this);
					}
					this._X_AssayGroupTest.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupStandardTestResults.Add(this);
						this._AssayGroupTestID = value.AssayGroupTestID;
					}
					else
					{
						this._AssayGroupTestID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_AssayGroupTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Sample_X_AssayGroupStandardTestResult", Storage="_X_Sample", ThisKey="AssayGroupTestSampleID", OtherKey="SampleID", IsForeignKey=true)]
		public X_Sample X_Sample
		{
			get
			{
				return this._X_Sample.Entity;
			}
			set
			{
				X_Sample previousValue = this._X_Sample.Entity;
				if (((previousValue != value) 
							|| (this._X_Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Sample.Entity = null;
						previousValue.X_AssayGroupStandardTestResults.Remove(this);
					}
					this._X_Sample.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupStandardTestResults.Add(this);
						this._AssayGroupTestSampleID = value.SampleID;
					}
					else
					{
						this._AssayGroupTestSampleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_Sample");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroupTest")]
	public partial class X_AssayGroupTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupTestID;
		
		private System.Nullable<System.Guid> _AssayGroupID;
		
		private string _AssayTypeName;
		
		private string _AssayTestName;
		
		private System.Nullable<System.Guid> _ParameterID;
		
		private System.Nullable<int> _AssayTestPriority;
		
		private System.Nullable<System.Guid> _AssayMethodID;
		
		private System.Nullable<System.Guid> _AssayTypeID;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_AssayGroupStandardTestResult> _X_AssayGroupStandardTestResults;
		
		private EntitySet<X_AssayGroupTestResult> _X_AssayGroupTestResults;
		
		private EntityRef<X_AssayGroup> _X_AssayGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupTestIDChanging(System.Guid value);
    partial void OnAssayGroupTestIDChanged();
    partial void OnAssayGroupIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayGroupIDChanged();
    partial void OnAssayTypeNameChanging(string value);
    partial void OnAssayTypeNameChanged();
    partial void OnAssayTestNameChanging(string value);
    partial void OnAssayTestNameChanged();
    partial void OnParameterIDChanging(System.Nullable<System.Guid> value);
    partial void OnParameterIDChanged();
    partial void OnAssayTestPriorityChanging(System.Nullable<int> value);
    partial void OnAssayTestPriorityChanged();
    partial void OnAssayMethodIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayMethodIDChanged();
    partial void OnAssayTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssayTypeIDChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroupTest()
		{
			this._X_AssayGroupStandardTestResults = new EntitySet<X_AssayGroupStandardTestResult>(new Action<X_AssayGroupStandardTestResult>(this.attach_X_AssayGroupStandardTestResults), new Action<X_AssayGroupStandardTestResult>(this.detach_X_AssayGroupStandardTestResults));
			this._X_AssayGroupTestResults = new EntitySet<X_AssayGroupTestResult>(new Action<X_AssayGroupTestResult>(this.attach_X_AssayGroupTestResults), new Action<X_AssayGroupTestResult>(this.detach_X_AssayGroupTestResults));
			this._X_AssayGroup = default(EntityRef<X_AssayGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupTestID
		{
			get
			{
				return this._AssayGroupTestID;
			}
			set
			{
				if ((this._AssayGroupTestID != value))
				{
					this.OnAssayGroupTestIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestID = value;
					this.SendPropertyChanged("AssayGroupTestID");
					this.OnAssayGroupTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayGroupID
		{
			get
			{
				return this._AssayGroupID;
			}
			set
			{
				if ((this._AssayGroupID != value))
				{
					if (this._X_AssayGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupID = value;
					this.SendPropertyChanged("AssayGroupID");
					this.OnAssayGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayTypeName", DbType="NVarChar(16)")]
		public string AssayTypeName
		{
			get
			{
				return this._AssayTypeName;
			}
			set
			{
				if ((this._AssayTypeName != value))
				{
					this.OnAssayTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AssayTypeName = value;
					this.SendPropertyChanged("AssayTypeName");
					this.OnAssayTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayTestName", DbType="NVarChar(16)")]
		public string AssayTestName
		{
			get
			{
				return this._AssayTestName;
			}
			set
			{
				if ((this._AssayTestName != value))
				{
					this.OnAssayTestNameChanging(value);
					this.SendPropertyChanging();
					this._AssayTestName = value;
					this.SendPropertyChanged("AssayTestName");
					this.OnAssayTestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayTestPriority", DbType="Int")]
		public System.Nullable<int> AssayTestPriority
		{
			get
			{
				return this._AssayTestPriority;
			}
			set
			{
				if ((this._AssayTestPriority != value))
				{
					this.OnAssayTestPriorityChanging(value);
					this.SendPropertyChanging();
					this._AssayTestPriority = value;
					this.SendPropertyChanged("AssayTestPriority");
					this.OnAssayTestPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayMethodID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayMethodID
		{
			get
			{
				return this._AssayMethodID;
			}
			set
			{
				if ((this._AssayMethodID != value))
				{
					this.OnAssayMethodIDChanging(value);
					this.SendPropertyChanging();
					this._AssayMethodID = value;
					this.SendPropertyChanged("AssayMethodID");
					this.OnAssayMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssayTypeID
		{
			get
			{
				return this._AssayTypeID;
			}
			set
			{
				if ((this._AssayTypeID != value))
				{
					this.OnAssayTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssayTypeID = value;
					this.SendPropertyChanged("AssayTypeID");
					this.OnAssayTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTest_X_AssayGroupStandardTestResult", Storage="_X_AssayGroupStandardTestResults", ThisKey="AssayGroupTestID", OtherKey="AssayGroupTestID")]
		public EntitySet<X_AssayGroupStandardTestResult> X_AssayGroupStandardTestResults
		{
			get
			{
				return this._X_AssayGroupStandardTestResults;
			}
			set
			{
				this._X_AssayGroupStandardTestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTest_X_AssayGroupTestResult", Storage="_X_AssayGroupTestResults", ThisKey="AssayGroupTestID", OtherKey="AssayGroupTestID")]
		public EntitySet<X_AssayGroupTestResult> X_AssayGroupTestResults
		{
			get
			{
				return this._X_AssayGroupTestResults;
			}
			set
			{
				this._X_AssayGroupTestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroup_X_AssayGroupTest", Storage="_X_AssayGroup", ThisKey="AssayGroupID", OtherKey="AssayGroupID", IsForeignKey=true)]
		public X_AssayGroup X_AssayGroup
		{
			get
			{
				return this._X_AssayGroup.Entity;
			}
			set
			{
				X_AssayGroup previousValue = this._X_AssayGroup.Entity;
				if (((previousValue != value) 
							|| (this._X_AssayGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_AssayGroup.Entity = null;
						previousValue.X_AssayGroupTests.Remove(this);
					}
					this._X_AssayGroup.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupTests.Add(this);
						this._AssayGroupID = value.AssayGroupID;
					}
					else
					{
						this._AssayGroupID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_AssayGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_AssayGroupStandardTestResults(X_AssayGroupStandardTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTest = this;
		}
		
		private void detach_X_AssayGroupStandardTestResults(X_AssayGroupStandardTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTest = null;
		}
		
		private void attach_X_AssayGroupTestResults(X_AssayGroupTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTest = this;
		}
		
		private void detach_X_AssayGroupTestResults(X_AssayGroupTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroupTestResult")]
	public partial class X_AssayGroupTestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupTestResultID;
		
		private System.Nullable<System.Guid> _SampleID;
		
		private System.Guid _AssayGroupTestID;
		
		private string _LabResultText;
		
		private System.Nullable<decimal> _LabResult;
		
		private string _LabSampleNumber;
		
		private string _LabBatchNumber;
		
		private System.Nullable<System.DateTime> _Sampled;
		
		private string _SampledBy;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_AssayGroupTestResultDuplicate> _X_AssayGroupTestResultDuplicates;
		
		private EntitySet<X_AssayGroupTestResultComment> _X_AssayGroupTestResultComments;
		
		private EntityRef<X_AssayGroupTest> _X_AssayGroupTest;
		
		private EntityRef<X_Sample> _X_Sample;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupTestResultIDChanging(System.Guid value);
    partial void OnAssayGroupTestResultIDChanged();
    partial void OnSampleIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleIDChanged();
    partial void OnAssayGroupTestIDChanging(System.Guid value);
    partial void OnAssayGroupTestIDChanged();
    partial void OnLabResultTextChanging(string value);
    partial void OnLabResultTextChanged();
    partial void OnLabResultChanging(System.Nullable<decimal> value);
    partial void OnLabResultChanged();
    partial void OnLabSampleNumberChanging(string value);
    partial void OnLabSampleNumberChanged();
    partial void OnLabBatchNumberChanging(string value);
    partial void OnLabBatchNumberChanged();
    partial void OnSampledChanging(System.Nullable<System.DateTime> value);
    partial void OnSampledChanged();
    partial void OnSampledByChanging(string value);
    partial void OnSampledByChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroupTestResult()
		{
			this._X_AssayGroupTestResultDuplicates = new EntitySet<X_AssayGroupTestResultDuplicate>(new Action<X_AssayGroupTestResultDuplicate>(this.attach_X_AssayGroupTestResultDuplicates), new Action<X_AssayGroupTestResultDuplicate>(this.detach_X_AssayGroupTestResultDuplicates));
			this._X_AssayGroupTestResultComments = new EntitySet<X_AssayGroupTestResultComment>(new Action<X_AssayGroupTestResultComment>(this.attach_X_AssayGroupTestResultComments), new Action<X_AssayGroupTestResultComment>(this.detach_X_AssayGroupTestResultComments));
			this._X_AssayGroupTest = default(EntityRef<X_AssayGroupTest>);
			this._X_Sample = default(EntityRef<X_Sample>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestResultID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupTestResultID
		{
			get
			{
				return this._AssayGroupTestResultID;
			}
			set
			{
				if ((this._AssayGroupTestResultID != value))
				{
					this.OnAssayGroupTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestResultID = value;
					this.SendPropertyChanged("AssayGroupTestResultID");
					this.OnAssayGroupTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					if (this._X_Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssayGroupTestID
		{
			get
			{
				return this._AssayGroupTestID;
			}
			set
			{
				if ((this._AssayGroupTestID != value))
				{
					if (this._X_AssayGroupTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupTestIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestID = value;
					this.SendPropertyChanged("AssayGroupTestID");
					this.OnAssayGroupTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResultText", DbType="NVarChar(58)")]
		public string LabResultText
		{
			get
			{
				return this._LabResultText;
			}
			set
			{
				if ((this._LabResultText != value))
				{
					this.OnLabResultTextChanging(value);
					this.SendPropertyChanging();
					this._LabResultText = value;
					this.SendPropertyChanged("LabResultText");
					this.OnLabResultTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabResult", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> LabResult
		{
			get
			{
				return this._LabResult;
			}
			set
			{
				if ((this._LabResult != value))
				{
					this.OnLabResultChanging(value);
					this.SendPropertyChanging();
					this._LabResult = value;
					this.SendPropertyChanged("LabResult");
					this.OnLabResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabSampleNumber", DbType="NVarChar(16)")]
		public string LabSampleNumber
		{
			get
			{
				return this._LabSampleNumber;
			}
			set
			{
				if ((this._LabSampleNumber != value))
				{
					this.OnLabSampleNumberChanging(value);
					this.SendPropertyChanging();
					this._LabSampleNumber = value;
					this.SendPropertyChanged("LabSampleNumber");
					this.OnLabSampleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabBatchNumber", DbType="NVarChar(16)")]
		public string LabBatchNumber
		{
			get
			{
				return this._LabBatchNumber;
			}
			set
			{
				if ((this._LabBatchNumber != value))
				{
					this.OnLabBatchNumberChanging(value);
					this.SendPropertyChanging();
					this._LabBatchNumber = value;
					this.SendPropertyChanged("LabBatchNumber");
					this.OnLabBatchNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sampled", DbType="Date")]
		public System.Nullable<System.DateTime> Sampled
		{
			get
			{
				return this._Sampled;
			}
			set
			{
				if ((this._Sampled != value))
				{
					this.OnSampledChanging(value);
					this.SendPropertyChanging();
					this._Sampled = value;
					this.SendPropertyChanged("Sampled");
					this.OnSampledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampledBy", DbType="NVarChar(50)")]
		public string SampledBy
		{
			get
			{
				return this._SampledBy;
			}
			set
			{
				if ((this._SampledBy != value))
				{
					this.OnSampledByChanging(value);
					this.SendPropertyChanging();
					this._SampledBy = value;
					this.SendPropertyChanged("SampledBy");
					this.OnSampledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTestResult_X_AssayGroupTestResultDuplicate", Storage="_X_AssayGroupTestResultDuplicates", ThisKey="AssayGroupTestResultID", OtherKey="AssayGroupTestResultID")]
		public EntitySet<X_AssayGroupTestResultDuplicate> X_AssayGroupTestResultDuplicates
		{
			get
			{
				return this._X_AssayGroupTestResultDuplicates;
			}
			set
			{
				this._X_AssayGroupTestResultDuplicates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTestResult_X_AssayGroupTestResultComment", Storage="_X_AssayGroupTestResultComments", ThisKey="AssayGroupTestResultID", OtherKey="AssayGroupTestResultID")]
		public EntitySet<X_AssayGroupTestResultComment> X_AssayGroupTestResultComments
		{
			get
			{
				return this._X_AssayGroupTestResultComments;
			}
			set
			{
				this._X_AssayGroupTestResultComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTest_X_AssayGroupTestResult", Storage="_X_AssayGroupTest", ThisKey="AssayGroupTestID", OtherKey="AssayGroupTestID", IsForeignKey=true)]
		public X_AssayGroupTest X_AssayGroupTest
		{
			get
			{
				return this._X_AssayGroupTest.Entity;
			}
			set
			{
				X_AssayGroupTest previousValue = this._X_AssayGroupTest.Entity;
				if (((previousValue != value) 
							|| (this._X_AssayGroupTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_AssayGroupTest.Entity = null;
						previousValue.X_AssayGroupTestResults.Remove(this);
					}
					this._X_AssayGroupTest.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupTestResults.Add(this);
						this._AssayGroupTestID = value.AssayGroupTestID;
					}
					else
					{
						this._AssayGroupTestID = default(System.Guid);
					}
					this.SendPropertyChanged("X_AssayGroupTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Sample_X_AssayGroupTestResult", Storage="_X_Sample", ThisKey="SampleID", OtherKey="SampleID", IsForeignKey=true)]
		public X_Sample X_Sample
		{
			get
			{
				return this._X_Sample.Entity;
			}
			set
			{
				X_Sample previousValue = this._X_Sample.Entity;
				if (((previousValue != value) 
							|| (this._X_Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_Sample.Entity = null;
						previousValue.X_AssayGroupTestResults.Remove(this);
					}
					this._X_Sample.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupTestResults.Add(this);
						this._SampleID = value.SampleID;
					}
					else
					{
						this._SampleID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("X_Sample");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_AssayGroupTestResultDuplicates(X_AssayGroupTestResultDuplicate entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTestResult = this;
		}
		
		private void detach_X_AssayGroupTestResultDuplicates(X_AssayGroupTestResultDuplicate entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTestResult = null;
		}
		
		private void attach_X_AssayGroupTestResultComments(X_AssayGroupTestResultComment entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTestResult = this;
		}
		
		private void detach_X_AssayGroupTestResultComments(X_AssayGroupTestResultComment entity)
		{
			this.SendPropertyChanging();
			entity.X_AssayGroupTestResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_AssayGroupTestResultComment")]
	public partial class X_AssayGroupTestResultComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssayGroupTestResultCommentID;
		
		private System.Guid _AssayGroupTestResultID;
		
		private string _Comment;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntityRef<X_AssayGroupTestResult> _X_AssayGroupTestResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssayGroupTestResultCommentIDChanging(System.Guid value);
    partial void OnAssayGroupTestResultCommentIDChanged();
    partial void OnAssayGroupTestResultIDChanging(System.Guid value);
    partial void OnAssayGroupTestResultIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_AssayGroupTestResultComment()
		{
			this._X_AssayGroupTestResult = default(EntityRef<X_AssayGroupTestResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestResultCommentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssayGroupTestResultCommentID
		{
			get
			{
				return this._AssayGroupTestResultCommentID;
			}
			set
			{
				if ((this._AssayGroupTestResultCommentID != value))
				{
					this.OnAssayGroupTestResultCommentIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestResultCommentID = value;
					this.SendPropertyChanged("AssayGroupTestResultCommentID");
					this.OnAssayGroupTestResultCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssayGroupTestResultID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssayGroupTestResultID
		{
			get
			{
				return this._AssayGroupTestResultID;
			}
			set
			{
				if ((this._AssayGroupTestResultID != value))
				{
					if (this._X_AssayGroupTestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssayGroupTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._AssayGroupTestResultID = value;
					this.SendPropertyChanged("AssayGroupTestResultID");
					this.OnAssayGroupTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_AssayGroupTestResult_X_AssayGroupTestResultComment", Storage="_X_AssayGroupTestResult", ThisKey="AssayGroupTestResultID", OtherKey="AssayGroupTestResultID", IsForeignKey=true)]
		public X_AssayGroupTestResult X_AssayGroupTestResult
		{
			get
			{
				return this._X_AssayGroupTestResult.Entity;
			}
			set
			{
				X_AssayGroupTestResult previousValue = this._X_AssayGroupTestResult.Entity;
				if (((previousValue != value) 
							|| (this._X_AssayGroupTestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._X_AssayGroupTestResult.Entity = null;
						previousValue.X_AssayGroupTestResultComments.Remove(this);
					}
					this._X_AssayGroupTestResult.Entity = value;
					if ((value != null))
					{
						value.X_AssayGroupTestResultComments.Add(this);
						this._AssayGroupTestResultID = value.AssayGroupTestResultID;
					}
					else
					{
						this._AssayGroupTestResultID = default(System.Guid);
					}
					this.SendPropertyChanged("X_AssayGroupTestResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Sample")]
	public partial class X_Sample : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SampleID;
		
		private System.Nullable<System.Guid> _HeaderID;
		
		private System.Nullable<System.Guid> _SampleCategoryID;
		
		private System.Nullable<System.Guid> _SampleStateID;
		
		private System.Nullable<System.Guid> _SampleTypeID;
		
		private string _SampleName;
		
		private string _SampleNumber;
		
		private System.Nullable<System.DateTime> _SampleTaken;
		
		private System.Nullable<decimal> _FromDepth;
		
		private System.Nullable<decimal> _ToDepth;
		
		private System.Nullable<decimal> _SampleMassKg;
		
		private System.Nullable<decimal> _DryMassKg;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
		private EntitySet<X_AssayGroupStandardTestResult> _X_AssayGroupStandardTestResults;
		
		private EntitySet<X_AssayGroupTestResult> _X_AssayGroupTestResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleIDChanging(System.Guid value);
    partial void OnSampleIDChanged();
    partial void OnHeaderIDChanging(System.Nullable<System.Guid> value);
    partial void OnHeaderIDChanged();
    partial void OnSampleCategoryIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleCategoryIDChanged();
    partial void OnSampleStateIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleStateIDChanged();
    partial void OnSampleTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnSampleTypeIDChanged();
    partial void OnSampleNameChanging(string value);
    partial void OnSampleNameChanged();
    partial void OnSampleNumberChanging(string value);
    partial void OnSampleNumberChanged();
    partial void OnSampleTakenChanging(System.Nullable<System.DateTime> value);
    partial void OnSampleTakenChanged();
    partial void OnFromDepthChanging(System.Nullable<decimal> value);
    partial void OnFromDepthChanged();
    partial void OnToDepthChanging(System.Nullable<decimal> value);
    partial void OnToDepthChanged();
    partial void OnSampleMassKgChanging(System.Nullable<decimal> value);
    partial void OnSampleMassKgChanged();
    partial void OnDryMassKgChanging(System.Nullable<decimal> value);
    partial void OnDryMassKgChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public X_Sample()
		{
			this._X_AssayGroupStandardTestResults = new EntitySet<X_AssayGroupStandardTestResult>(new Action<X_AssayGroupStandardTestResult>(this.attach_X_AssayGroupStandardTestResults), new Action<X_AssayGroupStandardTestResult>(this.detach_X_AssayGroupStandardTestResults));
			this._X_AssayGroupTestResults = new EntitySet<X_AssayGroupTestResult>(new Action<X_AssayGroupTestResult>(this.attach_X_AssayGroupTestResults), new Action<X_AssayGroupTestResult>(this.detach_X_AssayGroupTestResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> HeaderID
		{
			get
			{
				return this._HeaderID;
			}
			set
			{
				if ((this._HeaderID != value))
				{
					this.OnHeaderIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderID = value;
					this.SendPropertyChanged("HeaderID");
					this.OnHeaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleCategoryID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleCategoryID
		{
			get
			{
				return this._SampleCategoryID;
			}
			set
			{
				if ((this._SampleCategoryID != value))
				{
					this.OnSampleCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SampleCategoryID = value;
					this.SendPropertyChanged("SampleCategoryID");
					this.OnSampleCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleStateID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleStateID
		{
			get
			{
				return this._SampleStateID;
			}
			set
			{
				if ((this._SampleStateID != value))
				{
					this.OnSampleStateIDChanging(value);
					this.SendPropertyChanging();
					this._SampleStateID = value;
					this.SendPropertyChanged("SampleStateID");
					this.OnSampleStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SampleTypeID
		{
			get
			{
				return this._SampleTypeID;
			}
			set
			{
				if ((this._SampleTypeID != value))
				{
					this.OnSampleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SampleTypeID = value;
					this.SendPropertyChanged("SampleTypeID");
					this.OnSampleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleName", DbType="NVarChar(16)")]
		public string SampleName
		{
			get
			{
				return this._SampleName;
			}
			set
			{
				if ((this._SampleName != value))
				{
					this.OnSampleNameChanging(value);
					this.SendPropertyChanging();
					this._SampleName = value;
					this.SendPropertyChanged("SampleName");
					this.OnSampleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleNumber", DbType="NVarChar(16)")]
		public string SampleNumber
		{
			get
			{
				return this._SampleNumber;
			}
			set
			{
				if ((this._SampleNumber != value))
				{
					this.OnSampleNumberChanging(value);
					this.SendPropertyChanging();
					this._SampleNumber = value;
					this.SendPropertyChanged("SampleNumber");
					this.OnSampleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleTaken", DbType="DateTime")]
		public System.Nullable<System.DateTime> SampleTaken
		{
			get
			{
				return this._SampleTaken;
			}
			set
			{
				if ((this._SampleTaken != value))
				{
					this.OnSampleTakenChanging(value);
					this.SendPropertyChanging();
					this._SampleTaken = value;
					this.SendPropertyChanged("SampleTaken");
					this.OnSampleTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDepth", DbType="Decimal(7,3)")]
		public System.Nullable<decimal> FromDepth
		{
			get
			{
				return this._FromDepth;
			}
			set
			{
				if ((this._FromDepth != value))
				{
					this.OnFromDepthChanging(value);
					this.SendPropertyChanging();
					this._FromDepth = value;
					this.SendPropertyChanged("FromDepth");
					this.OnFromDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDepth", DbType="Decimal(7,3)")]
		public System.Nullable<decimal> ToDepth
		{
			get
			{
				return this._ToDepth;
			}
			set
			{
				if ((this._ToDepth != value))
				{
					this.OnToDepthChanging(value);
					this.SendPropertyChanging();
					this._ToDepth = value;
					this.SendPropertyChanged("ToDepth");
					this.OnToDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SampleMassKg", DbType="Decimal(6,4)")]
		public System.Nullable<decimal> SampleMassKg
		{
			get
			{
				return this._SampleMassKg;
			}
			set
			{
				if ((this._SampleMassKg != value))
				{
					this.OnSampleMassKgChanging(value);
					this.SendPropertyChanging();
					this._SampleMassKg = value;
					this.SendPropertyChanged("SampleMassKg");
					this.OnSampleMassKgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DryMassKg", DbType="Decimal(6,4)")]
		public System.Nullable<decimal> DryMassKg
		{
			get
			{
				return this._DryMassKg;
			}
			set
			{
				if ((this._DryMassKg != value))
				{
					this.OnDryMassKgChanging(value);
					this.SendPropertyChanging();
					this._DryMassKg = value;
					this.SendPropertyChanged("DryMassKg");
					this.OnDryMassKgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Sample_X_AssayGroupStandardTestResult", Storage="_X_AssayGroupStandardTestResults", ThisKey="SampleID", OtherKey="AssayGroupTestSampleID")]
		public EntitySet<X_AssayGroupStandardTestResult> X_AssayGroupStandardTestResults
		{
			get
			{
				return this._X_AssayGroupStandardTestResults;
			}
			set
			{
				this._X_AssayGroupStandardTestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="X_Sample_X_AssayGroupTestResult", Storage="_X_AssayGroupTestResults", ThisKey="SampleID", OtherKey="SampleID")]
		public EntitySet<X_AssayGroupTestResult> X_AssayGroupTestResults
		{
			get
			{
				return this._X_AssayGroupTestResults;
			}
			set
			{
				this._X_AssayGroupTestResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_X_AssayGroupStandardTestResults(X_AssayGroupStandardTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_Sample = this;
		}
		
		private void detach_X_AssayGroupStandardTestResults(X_AssayGroupStandardTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_Sample = null;
		}
		
		private void attach_X_AssayGroupTestResults(X_AssayGroupTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_Sample = this;
		}
		
		private void detach_X_AssayGroupTestResults(X_AssayGroupTestResult entity)
		{
			this.SendPropertyChanging();
			entity.X_Sample = null;
		}
	}
}
#pragma warning restore 1591
