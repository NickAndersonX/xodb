#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XODB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XODB")]
	public partial class SoftwareDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLicenseHistory(LicenseHistory instance);
    partial void UpdateLicenseHistory(LicenseHistory instance);
    partial void DeleteLicenseHistory(LicenseHistory instance);
    partial void InsertLicenseAsset(LicenseAsset instance);
    partial void UpdateLicenseAsset(LicenseAsset instance);
    partial void DeleteLicenseAsset(LicenseAsset instance);
    partial void InsertLicenseAssetModelPart(LicenseAssetModelPart instance);
    partial void UpdateLicenseAssetModelPart(LicenseAssetModelPart instance);
    partial void DeleteLicenseAssetModelPart(LicenseAssetModelPart instance);
    partial void InsertUsage(Usage instance);
    partial void UpdateUsage(Usage instance);
    partial void DeleteUsage(Usage instance);
    partial void InsertServerApplication(ServerApplication instance);
    partial void UpdateServerApplication(ServerApplication instance);
    partial void DeleteServerApplication(ServerApplication instance);
    partial void InsertLicense(License instance);
    partial void UpdateLicense(License instance);
    partial void DeleteLicense(License instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    #endregion
		
		public SoftwareDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SoftwareDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoftwareDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoftwareDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoftwareDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LicenseHistory> LicenseHistories
		{
			get
			{
				return this.GetTable<LicenseHistory>();
			}
		}
		
		public System.Data.Linq.Table<LicenseAsset> LicenseAssets
		{
			get
			{
				return this.GetTable<LicenseAsset>();
			}
		}
		
		public System.Data.Linq.Table<LicenseAssetModelPart> LicenseAssetModelParts
		{
			get
			{
				return this.GetTable<LicenseAssetModelPart>();
			}
		}
		
		public System.Data.Linq.Table<Usage> Usages
		{
			get
			{
				return this.GetTable<Usage>();
			}
		}
		
		public System.Data.Linq.Table<ServerApplication> ServerApplications
		{
			get
			{
				return this.GetTable<ServerApplication>();
			}
		}
		
		public System.Data.Linq.Table<License> Licenses
		{
			get
			{
				return this.GetTable<License>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_LicenseHistory")]
	public partial class LicenseHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseeGUID;
		
		private System.Guid _LastLicenseID;
		
		private string _LicenseHistoryEncrypted;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseeGUIDChanging(System.Guid value);
    partial void OnLicenseeGUIDChanged();
    partial void OnLastLicenseIDChanging(System.Guid value);
    partial void OnLastLicenseIDChanged();
    partial void OnLicenseHistoryEncryptedChanging(string value);
    partial void OnLicenseHistoryEncryptedChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public LicenseHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseeGUID
		{
			get
			{
				return this._LicenseeGUID;
			}
			set
			{
				if ((this._LicenseeGUID != value))
				{
					this.OnLicenseeGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseeGUID = value;
					this.SendPropertyChanged("LicenseeGUID");
					this.OnLicenseeGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLicenseID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastLicenseID
		{
			get
			{
				return this._LastLicenseID;
			}
			set
			{
				if ((this._LastLicenseID != value))
				{
					this.OnLastLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LastLicenseID = value;
					this.SendPropertyChanged("LastLicenseID");
					this.OnLastLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseHistoryEncrypted", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LicenseHistoryEncrypted
		{
			get
			{
				return this._LicenseHistoryEncrypted;
			}
			set
			{
				if ((this._LicenseHistoryEncrypted != value))
				{
					this.OnLicenseHistoryEncryptedChanging(value);
					this.SendPropertyChanging();
					this._LicenseHistoryEncrypted = value;
					this.SendPropertyChanged("LicenseHistoryEncrypted");
					this.OnLicenseHistoryEncryptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_LicenseAsset")]
	public partial class LicenseAsset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseAssetID;
		
		private System.Nullable<System.Guid> _LicenseID;
		
		private System.Nullable<System.Guid> _AssetID;
		
		private System.Nullable<System.Guid> _ModelID;
		
		private string _Restrictions;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseAssetIDChanging(System.Guid value);
    partial void OnLicenseAssetIDChanged();
    partial void OnLicenseIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseIDChanged();
    partial void OnAssetIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssetIDChanged();
    partial void OnModelIDChanging(System.Nullable<System.Guid> value);
    partial void OnModelIDChanged();
    partial void OnRestrictionsChanging(string value);
    partial void OnRestrictionsChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public LicenseAsset()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseAssetID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseAssetID
		{
			get
			{
				return this._LicenseAssetID;
			}
			set
			{
				if ((this._LicenseAssetID != value))
				{
					this.OnLicenseAssetIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseAssetID = value;
					this.SendPropertyChanged("LicenseAssetID");
					this.OnLicenseAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssetID
		{
			get
			{
				return this._AssetID;
			}
			set
			{
				if ((this._AssetID != value))
				{
					this.OnAssetIDChanging(value);
					this.SendPropertyChanging();
					this._AssetID = value;
					this.SendPropertyChanged("AssetID");
					this.OnAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Restrictions", DbType="NVarChar(255)")]
		public string Restrictions
		{
			get
			{
				return this._Restrictions;
			}
			set
			{
				if ((this._Restrictions != value))
				{
					this.OnRestrictionsChanging(value);
					this.SendPropertyChanging();
					this._Restrictions = value;
					this.SendPropertyChanged("Restrictions");
					this.OnRestrictionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_LicenseAssetModelPart")]
	public partial class LicenseAssetModelPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseAssetModelPartID;
		
		private System.Nullable<System.Guid> _LicenseAssetID;
		
		private System.Nullable<System.Guid> _ModelPartID;
		
		private string _Restrictions;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseAssetModelPartIDChanging(System.Guid value);
    partial void OnLicenseAssetModelPartIDChanged();
    partial void OnLicenseAssetIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseAssetIDChanged();
    partial void OnModelPartIDChanging(System.Nullable<System.Guid> value);
    partial void OnModelPartIDChanged();
    partial void OnRestrictionsChanging(string value);
    partial void OnRestrictionsChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public LicenseAssetModelPart()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseAssetModelPartID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseAssetModelPartID
		{
			get
			{
				return this._LicenseAssetModelPartID;
			}
			set
			{
				if ((this._LicenseAssetModelPartID != value))
				{
					this.OnLicenseAssetModelPartIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseAssetModelPartID = value;
					this.SendPropertyChanged("LicenseAssetModelPartID");
					this.OnLicenseAssetModelPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseAssetID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LicenseAssetID
		{
			get
			{
				return this._LicenseAssetID;
			}
			set
			{
				if ((this._LicenseAssetID != value))
				{
					this.OnLicenseAssetIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseAssetID = value;
					this.SendPropertyChanged("LicenseAssetID");
					this.OnLicenseAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelPartID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ModelPartID
		{
			get
			{
				return this._ModelPartID;
			}
			set
			{
				if ((this._ModelPartID != value))
				{
					this.OnModelPartIDChanging(value);
					this.SendPropertyChanging();
					this._ModelPartID = value;
					this.SendPropertyChanged("ModelPartID");
					this.OnModelPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Restrictions", DbType="NVarChar(255)")]
		public string Restrictions
		{
			get
			{
				return this._Restrictions;
			}
			set
			{
				if ((this._Restrictions != value))
				{
					this.OnRestrictionsChanging(value);
					this.SendPropertyChanging();
					this._Restrictions = value;
					this.SendPropertyChanged("Restrictions");
					this.OnRestrictionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Usage")]
	public partial class Usage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UsageID;
		
		private System.Nullable<System.Guid> _AssetID;
		
		private System.Nullable<System.Guid> _ModelID;
		
		private System.Nullable<System.Guid> _PartID;
		
		private System.Nullable<System.DateTime> _DurationStart;
		
		private System.Nullable<System.DateTime> _DurationEnd;
		
		private System.Nullable<System.Guid> _UnitID;
		
		private System.Nullable<decimal> _Measurement;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsageIDChanging(System.Guid value);
    partial void OnUsageIDChanged();
    partial void OnAssetIDChanging(System.Nullable<System.Guid> value);
    partial void OnAssetIDChanged();
    partial void OnModelIDChanging(System.Nullable<System.Guid> value);
    partial void OnModelIDChanged();
    partial void OnPartIDChanging(System.Nullable<System.Guid> value);
    partial void OnPartIDChanged();
    partial void OnDurationStartChanging(System.Nullable<System.DateTime> value);
    partial void OnDurationStartChanged();
    partial void OnDurationEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDurationEndChanged();
    partial void OnUnitIDChanging(System.Nullable<System.Guid> value);
    partial void OnUnitIDChanged();
    partial void OnMeasurementChanging(System.Nullable<decimal> value);
    partial void OnMeasurementChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public Usage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsageID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UsageID
		{
			get
			{
				return this._UsageID;
			}
			set
			{
				if ((this._UsageID != value))
				{
					this.OnUsageIDChanging(value);
					this.SendPropertyChanging();
					this._UsageID = value;
					this.SendPropertyChanged("UsageID");
					this.OnUsageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AssetID
		{
			get
			{
				return this._AssetID;
			}
			set
			{
				if ((this._AssetID != value))
				{
					this.OnAssetIDChanging(value);
					this.SendPropertyChanging();
					this._AssetID = value;
					this.SendPropertyChanged("AssetID");
					this.OnAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> DurationStart
		{
			get
			{
				return this._DurationStart;
			}
			set
			{
				if ((this._DurationStart != value))
				{
					this.OnDurationStartChanging(value);
					this.SendPropertyChanging();
					this._DurationStart = value;
					this.SendPropertyChanged("DurationStart");
					this.OnDurationStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DurationEnd
		{
			get
			{
				return this._DurationEnd;
			}
			set
			{
				if ((this._DurationEnd != value))
				{
					this.OnDurationEndChanging(value);
					this.SendPropertyChanging();
					this._DurationEnd = value;
					this.SendPropertyChanged("DurationEnd");
					this.OnDurationEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measurement", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> Measurement
		{
			get
			{
				return this._Measurement;
			}
			set
			{
				if ((this._Measurement != value))
				{
					this.OnMeasurementChanging(value);
					this.SendPropertyChanging();
					this._Measurement = value;
					this.SendPropertyChanged("Measurement");
					this.OnMeasurementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_ServerApplication")]
	public partial class ServerApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServerApplicationID;
		
		private System.Nullable<System.Guid> _ServerID;
		
		private System.Nullable<System.Guid> _ApplicationID;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerApplicationIDChanging(System.Guid value);
    partial void OnServerApplicationIDChanged();
    partial void OnServerIDChanging(System.Nullable<System.Guid> value);
    partial void OnServerIDChanged();
    partial void OnApplicationIDChanging(System.Nullable<System.Guid> value);
    partial void OnApplicationIDChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public ServerApplication()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerApplicationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServerApplicationID
		{
			get
			{
				return this._ServerApplicationID;
			}
			set
			{
				if ((this._ServerApplicationID != value))
				{
					this.OnServerApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ServerApplicationID = value;
					this.SendPropertyChanged("ServerApplicationID");
					this.OnServerApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_License")]
	public partial class License : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseID;
		
		private System.Nullable<System.Guid> _CompanyID;
		
		private System.Nullable<System.Guid> _ContactID;
		
		private System.Nullable<System.Guid> _LicenseeGUID;
		
		private string _LicenseeName;
		
		private string _LicenseeUsername;
		
		private string _LicenseeUniqueMachineCode1;
		
		private string _LicenseeUniqueMachineCode2;
		
		private System.Nullable<System.Guid> _LicenseeGroupID;
		
		private string _LicensorIP;
		
		private string _LicensorName;
		
		private string _LicenseType;
		
		private string _LicenseURL;
		
		private string _RootServerName;
		
		private System.Nullable<System.Guid> _RootServerID;
		
		private string _ServerName;
		
		private System.Nullable<System.Guid> _ServerID;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _Expiry;
		
		private System.Nullable<System.DateTime> _SupportExpiry;
		
		private System.Nullable<decimal> _ValidForDuration;
		
		private System.Nullable<System.Guid> _ValidForUnitID;
		
		private string _ValidForUnitTarget;
		
		private System.Nullable<int> _VersionMajor;
		
		private System.Nullable<int> _VersionMinor;
		
		private System.Nullable<int> _VersionBuild;
		
		private System.Nullable<int> _SupportedToMajor;
		
		private System.Nullable<int> _SupportedToMinor;
		
		private System.Nullable<int> _SupportedToBuild;
		
		private System.Nullable<System.DateTime> _Nuked;
		
		private string _NukedReason;
		
		private System.Nullable<System.Guid> _TimeServerID;
		
		private string _TimeServerName;
		
		private string _TimeServerResolutionMask;
		
		private string _TimeServerIP;
		
		private string _PreAuthorizationCode;
		
		private System.Nullable<System.DateTime> _PreAuthorizationExecuted;
		
		private string _Signatory1;
		
		private string _Signatory2;
		
		private string _Signatory3;
		
		private string _Signature1;
		
		private string _Signature2;
		
		private string _Signature3;
		
		private System.Nullable<System.DateTime> _Received;
		
		private System.Nullable<System.DateTime> _CheckedIn;
		
		private string _LicenceeCertificate;
		
		private string _LicensorCertificate;
		
		private string _ChecksumType;
		
		private string _Checksum;
		
		private string _EncryptedKey;
		
		private string _LicenseKeyCode;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseIDChanging(System.Guid value);
    partial void OnLicenseIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnContactIDChanged();
    partial void OnLicenseeGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseeGUIDChanged();
    partial void OnLicenseeNameChanging(string value);
    partial void OnLicenseeNameChanged();
    partial void OnLicenseeUsernameChanging(string value);
    partial void OnLicenseeUsernameChanged();
    partial void OnLicenseeUniqueMachineCode1Changing(string value);
    partial void OnLicenseeUniqueMachineCode1Changed();
    partial void OnLicenseeUniqueMachineCode2Changing(string value);
    partial void OnLicenseeUniqueMachineCode2Changed();
    partial void OnLicenseeGroupIDChanging(System.Nullable<System.Guid> value);
    partial void OnLicenseeGroupIDChanged();
    partial void OnLicensorIPChanging(string value);
    partial void OnLicensorIPChanged();
    partial void OnLicensorNameChanging(string value);
    partial void OnLicensorNameChanged();
    partial void OnLicenseTypeChanging(string value);
    partial void OnLicenseTypeChanged();
    partial void OnLicenseURLChanging(string value);
    partial void OnLicenseURLChanged();
    partial void OnRootServerNameChanging(string value);
    partial void OnRootServerNameChanged();
    partial void OnRootServerIDChanging(System.Nullable<System.Guid> value);
    partial void OnRootServerIDChanged();
    partial void OnServerNameChanging(string value);
    partial void OnServerNameChanged();
    partial void OnServerIDChanging(System.Nullable<System.Guid> value);
    partial void OnServerIDChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryChanged();
    partial void OnSupportExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnSupportExpiryChanged();
    partial void OnValidForDurationChanging(System.Nullable<decimal> value);
    partial void OnValidForDurationChanged();
    partial void OnValidForUnitIDChanging(System.Nullable<System.Guid> value);
    partial void OnValidForUnitIDChanged();
    partial void OnValidForUnitTargetChanging(string value);
    partial void OnValidForUnitTargetChanged();
    partial void OnVersionMajorChanging(System.Nullable<int> value);
    partial void OnVersionMajorChanged();
    partial void OnVersionMinorChanging(System.Nullable<int> value);
    partial void OnVersionMinorChanged();
    partial void OnVersionBuildChanging(System.Nullable<int> value);
    partial void OnVersionBuildChanged();
    partial void OnSupportedToMajorChanging(System.Nullable<int> value);
    partial void OnSupportedToMajorChanged();
    partial void OnSupportedToMinorChanging(System.Nullable<int> value);
    partial void OnSupportedToMinorChanged();
    partial void OnSupportedToBuildChanging(System.Nullable<int> value);
    partial void OnSupportedToBuildChanged();
    partial void OnNukedChanging(System.Nullable<System.DateTime> value);
    partial void OnNukedChanged();
    partial void OnNukedReasonChanging(string value);
    partial void OnNukedReasonChanged();
    partial void OnTimeServerIDChanging(System.Nullable<System.Guid> value);
    partial void OnTimeServerIDChanged();
    partial void OnTimeServerNameChanging(string value);
    partial void OnTimeServerNameChanged();
    partial void OnTimeServerResolutionMaskChanging(string value);
    partial void OnTimeServerResolutionMaskChanged();
    partial void OnTimeServerIPChanging(string value);
    partial void OnTimeServerIPChanged();
    partial void OnPreAuthorizationCodeChanging(string value);
    partial void OnPreAuthorizationCodeChanged();
    partial void OnPreAuthorizationExecutedChanging(System.Nullable<System.DateTime> value);
    partial void OnPreAuthorizationExecutedChanged();
    partial void OnSignatory1Changing(string value);
    partial void OnSignatory1Changed();
    partial void OnSignatory2Changing(string value);
    partial void OnSignatory2Changed();
    partial void OnSignatory3Changing(string value);
    partial void OnSignatory3Changed();
    partial void OnSignature1Changing(string value);
    partial void OnSignature1Changed();
    partial void OnSignature2Changing(string value);
    partial void OnSignature2Changed();
    partial void OnSignature3Changing(string value);
    partial void OnSignature3Changed();
    partial void OnReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedChanged();
    partial void OnCheckedInChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckedInChanged();
    partial void OnLicenceeCertificateChanging(string value);
    partial void OnLicenceeCertificateChanged();
    partial void OnLicensorCertificateChanging(string value);
    partial void OnLicensorCertificateChanged();
    partial void OnChecksumTypeChanging(string value);
    partial void OnChecksumTypeChanged();
    partial void OnChecksumChanging(string value);
    partial void OnChecksumChanged();
    partial void OnEncryptedKeyChanging(string value);
    partial void OnEncryptedKeyChanged();
    partial void OnLicenseKeyCodeChanging(string value);
    partial void OnLicenseKeyCodeChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public License()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LicenseeGUID
		{
			get
			{
				return this._LicenseeGUID;
			}
			set
			{
				if ((this._LicenseeGUID != value))
				{
					this.OnLicenseeGUIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseeGUID = value;
					this.SendPropertyChanged("LicenseeGUID");
					this.OnLicenseeGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeName", DbType="NVarChar(255)")]
		public string LicenseeName
		{
			get
			{
				return this._LicenseeName;
			}
			set
			{
				if ((this._LicenseeName != value))
				{
					this.OnLicenseeNameChanging(value);
					this.SendPropertyChanging();
					this._LicenseeName = value;
					this.SendPropertyChanged("LicenseeName");
					this.OnLicenseeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeUsername", DbType="NVarChar(255)")]
		public string LicenseeUsername
		{
			get
			{
				return this._LicenseeUsername;
			}
			set
			{
				if ((this._LicenseeUsername != value))
				{
					this.OnLicenseeUsernameChanging(value);
					this.SendPropertyChanging();
					this._LicenseeUsername = value;
					this.SendPropertyChanged("LicenseeUsername");
					this.OnLicenseeUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeUniqueMachineCode1", DbType="NVarChar(255)")]
		public string LicenseeUniqueMachineCode1
		{
			get
			{
				return this._LicenseeUniqueMachineCode1;
			}
			set
			{
				if ((this._LicenseeUniqueMachineCode1 != value))
				{
					this.OnLicenseeUniqueMachineCode1Changing(value);
					this.SendPropertyChanging();
					this._LicenseeUniqueMachineCode1 = value;
					this.SendPropertyChanged("LicenseeUniqueMachineCode1");
					this.OnLicenseeUniqueMachineCode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeUniqueMachineCode2", DbType="NVarChar(255)")]
		public string LicenseeUniqueMachineCode2
		{
			get
			{
				return this._LicenseeUniqueMachineCode2;
			}
			set
			{
				if ((this._LicenseeUniqueMachineCode2 != value))
				{
					this.OnLicenseeUniqueMachineCode2Changing(value);
					this.SendPropertyChanging();
					this._LicenseeUniqueMachineCode2 = value;
					this.SendPropertyChanged("LicenseeUniqueMachineCode2");
					this.OnLicenseeUniqueMachineCode2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseeGroupID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LicenseeGroupID
		{
			get
			{
				return this._LicenseeGroupID;
			}
			set
			{
				if ((this._LicenseeGroupID != value))
				{
					this.OnLicenseeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseeGroupID = value;
					this.SendPropertyChanged("LicenseeGroupID");
					this.OnLicenseeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensorIP", DbType="NVarChar(50)")]
		public string LicensorIP
		{
			get
			{
				return this._LicensorIP;
			}
			set
			{
				if ((this._LicensorIP != value))
				{
					this.OnLicensorIPChanging(value);
					this.SendPropertyChanging();
					this._LicensorIP = value;
					this.SendPropertyChanged("LicensorIP");
					this.OnLicensorIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensorName", DbType="NVarChar(255)")]
		public string LicensorName
		{
			get
			{
				return this._LicensorName;
			}
			set
			{
				if ((this._LicensorName != value))
				{
					this.OnLicensorNameChanging(value);
					this.SendPropertyChanging();
					this._LicensorName = value;
					this.SendPropertyChanged("LicensorName");
					this.OnLicensorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseType", DbType="NVarChar(255)")]
		public string LicenseType
		{
			get
			{
				return this._LicenseType;
			}
			set
			{
				if ((this._LicenseType != value))
				{
					this.OnLicenseTypeChanging(value);
					this.SendPropertyChanging();
					this._LicenseType = value;
					this.SendPropertyChanged("LicenseType");
					this.OnLicenseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseURL", DbType="NVarChar(2048)")]
		public string LicenseURL
		{
			get
			{
				return this._LicenseURL;
			}
			set
			{
				if ((this._LicenseURL != value))
				{
					this.OnLicenseURLChanging(value);
					this.SendPropertyChanging();
					this._LicenseURL = value;
					this.SendPropertyChanged("LicenseURL");
					this.OnLicenseURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootServerName", DbType="NVarChar(255)")]
		public string RootServerName
		{
			get
			{
				return this._RootServerName;
			}
			set
			{
				if ((this._RootServerName != value))
				{
					this.OnRootServerNameChanging(value);
					this.SendPropertyChanging();
					this._RootServerName = value;
					this.SendPropertyChanged("RootServerName");
					this.OnRootServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootServerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RootServerID
		{
			get
			{
				return this._RootServerID;
			}
			set
			{
				if ((this._RootServerID != value))
				{
					this.OnRootServerIDChanging(value);
					this.SendPropertyChanging();
					this._RootServerID = value;
					this.SendPropertyChanged("RootServerID");
					this.OnRootServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="NVarChar(255)")]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this.OnServerNameChanging(value);
					this.SendPropertyChanging();
					this._ServerName = value;
					this.SendPropertyChanged("ServerName");
					this.OnServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expiry
		{
			get
			{
				return this._Expiry;
			}
			set
			{
				if ((this._Expiry != value))
				{
					this.OnExpiryChanging(value);
					this.SendPropertyChanging();
					this._Expiry = value;
					this.SendPropertyChanged("Expiry");
					this.OnExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportExpiry", DbType="DateTime")]
		public System.Nullable<System.DateTime> SupportExpiry
		{
			get
			{
				return this._SupportExpiry;
			}
			set
			{
				if ((this._SupportExpiry != value))
				{
					this.OnSupportExpiryChanging(value);
					this.SendPropertyChanging();
					this._SupportExpiry = value;
					this.SendPropertyChanged("SupportExpiry");
					this.OnSupportExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidForDuration", DbType="Decimal(38,20)")]
		public System.Nullable<decimal> ValidForDuration
		{
			get
			{
				return this._ValidForDuration;
			}
			set
			{
				if ((this._ValidForDuration != value))
				{
					this.OnValidForDurationChanging(value);
					this.SendPropertyChanging();
					this._ValidForDuration = value;
					this.SendPropertyChanged("ValidForDuration");
					this.OnValidForDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidForUnitID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ValidForUnitID
		{
			get
			{
				return this._ValidForUnitID;
			}
			set
			{
				if ((this._ValidForUnitID != value))
				{
					this.OnValidForUnitIDChanging(value);
					this.SendPropertyChanging();
					this._ValidForUnitID = value;
					this.SendPropertyChanged("ValidForUnitID");
					this.OnValidForUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidForUnitTarget", DbType="NVarChar(255)")]
		public string ValidForUnitTarget
		{
			get
			{
				return this._ValidForUnitTarget;
			}
			set
			{
				if ((this._ValidForUnitTarget != value))
				{
					this.OnValidForUnitTargetChanging(value);
					this.SendPropertyChanging();
					this._ValidForUnitTarget = value;
					this.SendPropertyChanged("ValidForUnitTarget");
					this.OnValidForUnitTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionMajor", DbType="Int")]
		public System.Nullable<int> VersionMajor
		{
			get
			{
				return this._VersionMajor;
			}
			set
			{
				if ((this._VersionMajor != value))
				{
					this.OnVersionMajorChanging(value);
					this.SendPropertyChanging();
					this._VersionMajor = value;
					this.SendPropertyChanged("VersionMajor");
					this.OnVersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionMinor", DbType="Int")]
		public System.Nullable<int> VersionMinor
		{
			get
			{
				return this._VersionMinor;
			}
			set
			{
				if ((this._VersionMinor != value))
				{
					this.OnVersionMinorChanging(value);
					this.SendPropertyChanging();
					this._VersionMinor = value;
					this.SendPropertyChanged("VersionMinor");
					this.OnVersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionBuild", DbType="Int")]
		public System.Nullable<int> VersionBuild
		{
			get
			{
				return this._VersionBuild;
			}
			set
			{
				if ((this._VersionBuild != value))
				{
					this.OnVersionBuildChanging(value);
					this.SendPropertyChanging();
					this._VersionBuild = value;
					this.SendPropertyChanged("VersionBuild");
					this.OnVersionBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportedToMajor", DbType="Int")]
		public System.Nullable<int> SupportedToMajor
		{
			get
			{
				return this._SupportedToMajor;
			}
			set
			{
				if ((this._SupportedToMajor != value))
				{
					this.OnSupportedToMajorChanging(value);
					this.SendPropertyChanging();
					this._SupportedToMajor = value;
					this.SendPropertyChanged("SupportedToMajor");
					this.OnSupportedToMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportedToMinor", DbType="Int")]
		public System.Nullable<int> SupportedToMinor
		{
			get
			{
				return this._SupportedToMinor;
			}
			set
			{
				if ((this._SupportedToMinor != value))
				{
					this.OnSupportedToMinorChanging(value);
					this.SendPropertyChanging();
					this._SupportedToMinor = value;
					this.SendPropertyChanged("SupportedToMinor");
					this.OnSupportedToMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportedToBuild", DbType="Int")]
		public System.Nullable<int> SupportedToBuild
		{
			get
			{
				return this._SupportedToBuild;
			}
			set
			{
				if ((this._SupportedToBuild != value))
				{
					this.OnSupportedToBuildChanging(value);
					this.SendPropertyChanging();
					this._SupportedToBuild = value;
					this.SendPropertyChanged("SupportedToBuild");
					this.OnSupportedToBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nuked", DbType="DateTime")]
		public System.Nullable<System.DateTime> Nuked
		{
			get
			{
				return this._Nuked;
			}
			set
			{
				if ((this._Nuked != value))
				{
					this.OnNukedChanging(value);
					this.SendPropertyChanging();
					this._Nuked = value;
					this.SendPropertyChanged("Nuked");
					this.OnNukedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NukedReason", DbType="NVarChar(4000)")]
		public string NukedReason
		{
			get
			{
				return this._NukedReason;
			}
			set
			{
				if ((this._NukedReason != value))
				{
					this.OnNukedReasonChanging(value);
					this.SendPropertyChanging();
					this._NukedReason = value;
					this.SendPropertyChanged("NukedReason");
					this.OnNukedReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeServerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TimeServerID
		{
			get
			{
				return this._TimeServerID;
			}
			set
			{
				if ((this._TimeServerID != value))
				{
					this.OnTimeServerIDChanging(value);
					this.SendPropertyChanging();
					this._TimeServerID = value;
					this.SendPropertyChanged("TimeServerID");
					this.OnTimeServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeServerName", DbType="NVarChar(255)")]
		public string TimeServerName
		{
			get
			{
				return this._TimeServerName;
			}
			set
			{
				if ((this._TimeServerName != value))
				{
					this.OnTimeServerNameChanging(value);
					this.SendPropertyChanging();
					this._TimeServerName = value;
					this.SendPropertyChanged("TimeServerName");
					this.OnTimeServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeServerResolutionMask", DbType="NVarChar(50)")]
		public string TimeServerResolutionMask
		{
			get
			{
				return this._TimeServerResolutionMask;
			}
			set
			{
				if ((this._TimeServerResolutionMask != value))
				{
					this.OnTimeServerResolutionMaskChanging(value);
					this.SendPropertyChanging();
					this._TimeServerResolutionMask = value;
					this.SendPropertyChanged("TimeServerResolutionMask");
					this.OnTimeServerResolutionMaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeServerIP", DbType="NVarChar(50)")]
		public string TimeServerIP
		{
			get
			{
				return this._TimeServerIP;
			}
			set
			{
				if ((this._TimeServerIP != value))
				{
					this.OnTimeServerIPChanging(value);
					this.SendPropertyChanging();
					this._TimeServerIP = value;
					this.SendPropertyChanged("TimeServerIP");
					this.OnTimeServerIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreAuthorizationCode", DbType="NVarChar(255)")]
		public string PreAuthorizationCode
		{
			get
			{
				return this._PreAuthorizationCode;
			}
			set
			{
				if ((this._PreAuthorizationCode != value))
				{
					this.OnPreAuthorizationCodeChanging(value);
					this.SendPropertyChanging();
					this._PreAuthorizationCode = value;
					this.SendPropertyChanged("PreAuthorizationCode");
					this.OnPreAuthorizationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreAuthorizationExecuted", DbType="DateTime")]
		public System.Nullable<System.DateTime> PreAuthorizationExecuted
		{
			get
			{
				return this._PreAuthorizationExecuted;
			}
			set
			{
				if ((this._PreAuthorizationExecuted != value))
				{
					this.OnPreAuthorizationExecutedChanging(value);
					this.SendPropertyChanging();
					this._PreAuthorizationExecuted = value;
					this.SendPropertyChanged("PreAuthorizationExecuted");
					this.OnPreAuthorizationExecutedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signatory1", DbType="NVarChar(255)")]
		public string Signatory1
		{
			get
			{
				return this._Signatory1;
			}
			set
			{
				if ((this._Signatory1 != value))
				{
					this.OnSignatory1Changing(value);
					this.SendPropertyChanging();
					this._Signatory1 = value;
					this.SendPropertyChanged("Signatory1");
					this.OnSignatory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signatory2", DbType="NVarChar(255)")]
		public string Signatory2
		{
			get
			{
				return this._Signatory2;
			}
			set
			{
				if ((this._Signatory2 != value))
				{
					this.OnSignatory2Changing(value);
					this.SendPropertyChanging();
					this._Signatory2 = value;
					this.SendPropertyChanged("Signatory2");
					this.OnSignatory2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signatory3", DbType="NVarChar(255)")]
		public string Signatory3
		{
			get
			{
				return this._Signatory3;
			}
			set
			{
				if ((this._Signatory3 != value))
				{
					this.OnSignatory3Changing(value);
					this.SendPropertyChanging();
					this._Signatory3 = value;
					this.SendPropertyChanged("Signatory3");
					this.OnSignatory3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature1", DbType="NVarChar(4000)")]
		public string Signature1
		{
			get
			{
				return this._Signature1;
			}
			set
			{
				if ((this._Signature1 != value))
				{
					this.OnSignature1Changing(value);
					this.SendPropertyChanging();
					this._Signature1 = value;
					this.SendPropertyChanged("Signature1");
					this.OnSignature1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature2", DbType="NVarChar(4000)")]
		public string Signature2
		{
			get
			{
				return this._Signature2;
			}
			set
			{
				if ((this._Signature2 != value))
				{
					this.OnSignature2Changing(value);
					this.SendPropertyChanging();
					this._Signature2 = value;
					this.SendPropertyChanged("Signature2");
					this.OnSignature2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature3", DbType="NVarChar(4000)")]
		public string Signature3
		{
			get
			{
				return this._Signature3;
			}
			set
			{
				if ((this._Signature3 != value))
				{
					this.OnSignature3Changing(value);
					this.SendPropertyChanging();
					this._Signature3 = value;
					this.SendPropertyChanged("Signature3");
					this.OnSignature3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Received", DbType="DateTime")]
		public System.Nullable<System.DateTime> Received
		{
			get
			{
				return this._Received;
			}
			set
			{
				if ((this._Received != value))
				{
					this.OnReceivedChanging(value);
					this.SendPropertyChanging();
					this._Received = value;
					this.SendPropertyChanged("Received");
					this.OnReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckedIn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckedIn
		{
			get
			{
				return this._CheckedIn;
			}
			set
			{
				if ((this._CheckedIn != value))
				{
					this.OnCheckedInChanging(value);
					this.SendPropertyChanging();
					this._CheckedIn = value;
					this.SendPropertyChanged("CheckedIn");
					this.OnCheckedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenceeCertificate", DbType="NVarChar(MAX)")]
		public string LicenceeCertificate
		{
			get
			{
				return this._LicenceeCertificate;
			}
			set
			{
				if ((this._LicenceeCertificate != value))
				{
					this.OnLicenceeCertificateChanging(value);
					this.SendPropertyChanging();
					this._LicenceeCertificate = value;
					this.SendPropertyChanged("LicenceeCertificate");
					this.OnLicenceeCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensorCertificate", DbType="NVarChar(MAX)")]
		public string LicensorCertificate
		{
			get
			{
				return this._LicensorCertificate;
			}
			set
			{
				if ((this._LicensorCertificate != value))
				{
					this.OnLicensorCertificateChanging(value);
					this.SendPropertyChanging();
					this._LicensorCertificate = value;
					this.SendPropertyChanged("LicensorCertificate");
					this.OnLicensorCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChecksumType", DbType="NVarChar(16)")]
		public string ChecksumType
		{
			get
			{
				return this._ChecksumType;
			}
			set
			{
				if ((this._ChecksumType != value))
				{
					this.OnChecksumTypeChanging(value);
					this.SendPropertyChanging();
					this._ChecksumType = value;
					this.SendPropertyChanged("ChecksumType");
					this.OnChecksumTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checksum", DbType="NVarChar(255)")]
		public string Checksum
		{
			get
			{
				return this._Checksum;
			}
			set
			{
				if ((this._Checksum != value))
				{
					this.OnChecksumChanging(value);
					this.SendPropertyChanging();
					this._Checksum = value;
					this.SendPropertyChanged("Checksum");
					this.OnChecksumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncryptedKey", DbType="NVarChar(MAX)")]
		public string EncryptedKey
		{
			get
			{
				return this._EncryptedKey;
			}
			set
			{
				if ((this._EncryptedKey != value))
				{
					this.OnEncryptedKeyChanging(value);
					this.SendPropertyChanging();
					this._EncryptedKey = value;
					this.SendPropertyChanged("EncryptedKey");
					this.OnEncryptedKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseKeyCode", DbType="NVarChar(255)")]
		public string LicenseKeyCode
		{
			get
			{
				return this._LicenseKeyCode;
			}
			set
			{
				if ((this._LicenseKeyCode != value))
				{
					this.OnLicenseKeyCodeChanging(value);
					this.SendPropertyChanging();
					this._LicenseKeyCode = value;
					this.SendPropertyChanged("LicenseKeyCode");
					this.OnLicenseKeyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.X_Server")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServerID;
		
		private string _Hostname;
		
		private string _Domain;
		
		private string _IP;
		
		private string _ServerUniqueMachineCode1;
		
		private string _ServerUniqueMachineCode2;
		
		private string _ServerUniqueMachineCode3;
		
		private string _Certificate1;
		
		private string _Certificate2;
		
		private int _Version;
		
		private System.Nullable<System.Guid> _VersionAntecedentID;
		
		private System.Nullable<int> _VersionCertainty;
		
		private System.Nullable<System.Guid> _VersionWorkflowInstanceID;
		
		private System.Nullable<System.Guid> _VersionUpdatedBy;
		
		private System.Nullable<System.Guid> _VersionDeletedBy;
		
		private System.Nullable<System.Guid> _VersionOwnerContactID;
		
		private System.Nullable<System.Guid> _VersionOwnerCompanyID;
		
		private System.Nullable<System.DateTime> _VersionUpdated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerIDChanging(System.Guid value);
    partial void OnServerIDChanged();
    partial void OnHostnameChanging(string value);
    partial void OnHostnameChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnServerUniqueMachineCode1Changing(string value);
    partial void OnServerUniqueMachineCode1Changed();
    partial void OnServerUniqueMachineCode2Changing(string value);
    partial void OnServerUniqueMachineCode2Changed();
    partial void OnServerUniqueMachineCode3Changing(string value);
    partial void OnServerUniqueMachineCode3Changed();
    partial void OnCertificate1Changing(string value);
    partial void OnCertificate1Changed();
    partial void OnCertificate2Changing(string value);
    partial void OnCertificate2Changed();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnVersionAntecedentIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionAntecedentIDChanged();
    partial void OnVersionCertaintyChanging(System.Nullable<int> value);
    partial void OnVersionCertaintyChanged();
    partial void OnVersionWorkflowInstanceIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionWorkflowInstanceIDChanged();
    partial void OnVersionUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionUpdatedByChanged();
    partial void OnVersionDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnVersionDeletedByChanged();
    partial void OnVersionOwnerContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerContactIDChanged();
    partial void OnVersionOwnerCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnVersionOwnerCompanyIDChanged();
    partial void OnVersionUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnVersionUpdatedChanged();
    #endregion
		
		public Server()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hostname", DbType="NVarChar(255)")]
		public string Hostname
		{
			get
			{
				return this._Hostname;
			}
			set
			{
				if ((this._Hostname != value))
				{
					this.OnHostnameChanging(value);
					this.SendPropertyChanging();
					this._Hostname = value;
					this.SendPropertyChanged("Hostname");
					this.OnHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="NVarChar(255)")]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(64)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerUniqueMachineCode1", DbType="NVarChar(255)")]
		public string ServerUniqueMachineCode1
		{
			get
			{
				return this._ServerUniqueMachineCode1;
			}
			set
			{
				if ((this._ServerUniqueMachineCode1 != value))
				{
					this.OnServerUniqueMachineCode1Changing(value);
					this.SendPropertyChanging();
					this._ServerUniqueMachineCode1 = value;
					this.SendPropertyChanged("ServerUniqueMachineCode1");
					this.OnServerUniqueMachineCode1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerUniqueMachineCode2", DbType="NVarChar(255)")]
		public string ServerUniqueMachineCode2
		{
			get
			{
				return this._ServerUniqueMachineCode2;
			}
			set
			{
				if ((this._ServerUniqueMachineCode2 != value))
				{
					this.OnServerUniqueMachineCode2Changing(value);
					this.SendPropertyChanging();
					this._ServerUniqueMachineCode2 = value;
					this.SendPropertyChanged("ServerUniqueMachineCode2");
					this.OnServerUniqueMachineCode2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerUniqueMachineCode3", DbType="NVarChar(255)")]
		public string ServerUniqueMachineCode3
		{
			get
			{
				return this._ServerUniqueMachineCode3;
			}
			set
			{
				if ((this._ServerUniqueMachineCode3 != value))
				{
					this.OnServerUniqueMachineCode3Changing(value);
					this.SendPropertyChanging();
					this._ServerUniqueMachineCode3 = value;
					this.SendPropertyChanged("ServerUniqueMachineCode3");
					this.OnServerUniqueMachineCode3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Certificate1", DbType="NVarChar(MAX)")]
		public string Certificate1
		{
			get
			{
				return this._Certificate1;
			}
			set
			{
				if ((this._Certificate1 != value))
				{
					this.OnCertificate1Changing(value);
					this.SendPropertyChanging();
					this._Certificate1 = value;
					this.SendPropertyChanged("Certificate1");
					this.OnCertificate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Certificate2", DbType="NVarChar(MAX)")]
		public string Certificate2
		{
			get
			{
				return this._Certificate2;
			}
			set
			{
				if ((this._Certificate2 != value))
				{
					this.OnCertificate2Changing(value);
					this.SendPropertyChanging();
					this._Certificate2 = value;
					this.SendPropertyChanged("Certificate2");
					this.OnCertificate2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionAntecedentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionAntecedentID
		{
			get
			{
				return this._VersionAntecedentID;
			}
			set
			{
				if ((this._VersionAntecedentID != value))
				{
					this.OnVersionAntecedentIDChanging(value);
					this.SendPropertyChanging();
					this._VersionAntecedentID = value;
					this.SendPropertyChanged("VersionAntecedentID");
					this.OnVersionAntecedentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionCertainty", DbType="Int")]
		public System.Nullable<int> VersionCertainty
		{
			get
			{
				return this._VersionCertainty;
			}
			set
			{
				if ((this._VersionCertainty != value))
				{
					this.OnVersionCertaintyChanging(value);
					this.SendPropertyChanging();
					this._VersionCertainty = value;
					this.SendPropertyChanged("VersionCertainty");
					this.OnVersionCertaintyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionWorkflowInstanceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionWorkflowInstanceID
		{
			get
			{
				return this._VersionWorkflowInstanceID;
			}
			set
			{
				if ((this._VersionWorkflowInstanceID != value))
				{
					this.OnVersionWorkflowInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._VersionWorkflowInstanceID = value;
					this.SendPropertyChanged("VersionWorkflowInstanceID");
					this.OnVersionWorkflowInstanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionUpdatedBy
		{
			get
			{
				return this._VersionUpdatedBy;
			}
			set
			{
				if ((this._VersionUpdatedBy != value))
				{
					this.OnVersionUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdatedBy = value;
					this.SendPropertyChanged("VersionUpdatedBy");
					this.OnVersionUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionDeletedBy
		{
			get
			{
				return this._VersionDeletedBy;
			}
			set
			{
				if ((this._VersionDeletedBy != value))
				{
					this.OnVersionDeletedByChanging(value);
					this.SendPropertyChanging();
					this._VersionDeletedBy = value;
					this.SendPropertyChanged("VersionDeletedBy");
					this.OnVersionDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerContactID
		{
			get
			{
				return this._VersionOwnerContactID;
			}
			set
			{
				if ((this._VersionOwnerContactID != value))
				{
					this.OnVersionOwnerContactIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerContactID = value;
					this.SendPropertyChanged("VersionOwnerContactID");
					this.OnVersionOwnerContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionOwnerCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VersionOwnerCompanyID
		{
			get
			{
				return this._VersionOwnerCompanyID;
			}
			set
			{
				if ((this._VersionOwnerCompanyID != value))
				{
					this.OnVersionOwnerCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._VersionOwnerCompanyID = value;
					this.SendPropertyChanged("VersionOwnerCompanyID");
					this.OnVersionOwnerCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> VersionUpdated
		{
			get
			{
				return this._VersionUpdated;
			}
			set
			{
				if ((this._VersionUpdated != value))
				{
					this.OnVersionUpdatedChanging(value);
					this.SendPropertyChanging();
					this._VersionUpdated = value;
					this.SendPropertyChanged("VersionUpdated");
					this.OnVersionUpdatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
